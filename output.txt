    Checking rainbow-docs v0.1.0 (/home/ubuntu/Rainbow-Hub/Rainbow-Docs)
warning: unused imports: `delete` and `put`
 --> src/routes/comments.rs:5:26
  |
5 |     routing::{get, post, put, delete},
  |                          ^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `delete`, `http::StatusCode`, `post`, and `put`
  --> src/routes/documents.rs:8:5
   |
8  |     http::StatusCode,
   |     ^^^^^^^^^^^^^^^^
9  |     response::Json,
10 |     routing::{get, post, put, delete},
   |                    ^^^^  ^^^  ^^^^^^

warning: unused import: `warn`
  --> src/routes/documents.rs:15:21
   |
15 | use tracing::{info, warn};
   |                     ^^^^

warning: unused imports: `Response`, `delete`, and `post`
 --> src/routes/files.rs:4:30
  |
4 |     response::{IntoResponse, Response},
  |                              ^^^^^^^^
5 |     routing::{delete, get, post},
  |               ^^^^^^       ^^^^

warning: unused import: `error`
  --> src/routes/files.rs:10:15
   |
10 | use tracing::{error, info};
   |               ^^^^^

warning: unused imports: `delete`, `http::StatusCode`, `post`, and `put`
 --> src/routes/spaces.rs:6:5
  |
6 |     http::StatusCode,
  |     ^^^^^^^^^^^^^^^^
7 |     response::Json,
8 |     routing::{get, post, put, delete},
  |                    ^^^^  ^^^  ^^^^^^

warning: unused import: `warn`
  --> src/routes/spaces.rs:13:21
   |
13 | use tracing::{info, warn};
   |                     ^^^^

warning: unused import: `put`
 --> src/routes/tags.rs:5:26
  |
5 |     routing::{get, post, put, delete},
  |                          ^^^

warning: unused import: `delete`
 --> src/routes/versions.rs:5:26
  |
5 |     routing::{get, post, delete},
  |                          ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/models/space.rs:3:5
  |
3 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `State` and `StatusCode`
 --> src/services/auth.rs:5:33
  |
5 |     extract::{FromRequestParts, State},
  |                                 ^^^^^
6 |     headers::{authorization::Bearer, Authorization},
7 |     http::{request::Parts, StatusCode},
  |                            ^^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> src/services/database.rs:4:5
  |
4 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `models::search::SearchIndex`
 --> src/services/documents.rs:8:5
  |
8 |     models::search::SearchIndex,
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Datetime`
 --> src/services/file_upload.rs:5:22
  |
5 | use surrealdb::sql::{Datetime, Thing};
  |                      ^^^^^^^^

warning: unused import: `crate::config::Config`
 --> src/services/spaces.rs:1:5
  |
1 | use crate::config::Config;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `surrealdb::sql::Thing`
  --> src/services/spaces.rs:11:5
   |
11 | use surrealdb::sql::Thing;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `StatusCode` and `response::Response`
 --> src/utils/auth.rs:4:12
  |
4 |     http::{StatusCode, HeaderMap},
  |            ^^^^^^^^^^
5 |     response::Response,
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashSet`
 --> src/utils/auth.rs:7:5
  |
7 | use std::collections::HashSet;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AppError`
 --> src/utils/markdown.rs:1:20
  |
1 | use crate::error::{AppError, Result};
  |                    ^^^^^^^^

warning: unused imports: `ClassStyle` and `ClassedHTMLGenerator`
 --> src/utils/markdown.rs:3:21
  |
3 | use syntect::html::{ClassedHTMLGenerator, ClassStyle};
  |                     ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^

error[E0061]: this function takes 3 arguments but 1 argument was supplied
  --> src/routes/documents.rs:34:28
   |
34 |     let document_service = DocumentService::new(db);
   |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
   |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
  --> src/routes/documents.rs:34:49
   |
34 |     let document_service = DocumentService::new(db);
   |                                                 ^^
   = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
              found struct `Arc<services::database::Database>`
note: associated function defined here
  --> src/services/documents.rs:24:12
   |
24 |     pub fn new(
   |            ^^^
25 |         db: Arc<Surreal<Client>>,
   |         ------------------------
26 |         auth_service: Arc<AuthService>,
   |         ------------------------------
27 |         markdown_processor: Arc<MarkdownProcessor>,
   |         ------------------------------------------
help: provide the arguments
   |
34 -     let document_service = DocumentService::new(db);
34 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
   |

error[E0599]: no method named `list_documents` found for struct `DocumentService` in the current scope
   --> src/routes/documents.rs:35:35
    |
35  |     let result = document_service.list_documents(&space_slug, query, user.as_ref()).await?;
    |                                   ^^^^^^^^^^^^^^
    |
   ::: src/services/documents.rs:15:1
    |
15  | pub struct DocumentService {
    | -------------------------- method `list_documents` not found for this struct
    |
help: there is a method `get_document` with a similar name, but with different arguments
   --> src/services/documents.rs:140:5
    |
140 |     pub async fn get_document(&self, document_id: &str) -> Result<Document, ApiError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: this function depends on never type fallback being `()`
  --> src/routes/documents.rs:28:1
   |
28 | / async fn list_documents(
29 | |     State(db): State<Arc<Database>>,
30 | |     Path(space_slug): Path<String>,
31 | |     Query(query): Query<DocumentQuery>,
32 | |     OptionalUser(user): OptionalUser,
33 | | ) -> Result<Json<Value>> {
   | |________________________^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Serialize` will fail
  --> src/routes/documents.rs:37:13
   |
37 |       Ok(Json(json!({
   |  _____________^
38 | |         "success": true,
39 | |         "data": result,
40 | |         "message": "Documents retrieved successfully"
41 | |     })))
   | |______^
   = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default
   = note: this warning originates in the macro `$crate::json_internal` which comes from the expansion of the macro `json` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use `()` annotations to avoid fallback changes
   |
35 |     let result: () = document_service.list_documents(&space_slug, query, user.as_ref()).await?;
   |               ++++

error[E0061]: this function takes 3 arguments but 1 argument was supplied
  --> src/routes/documents.rs:57:28
   |
57 |     let document_service = DocumentService::new(db);
   |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
   |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
  --> src/routes/documents.rs:57:49
   |
57 |     let document_service = DocumentService::new(db);
   |                                                 ^^
   = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
              found struct `Arc<services::database::Database>`
note: associated function defined here
  --> src/services/documents.rs:24:12
   |
24 |     pub fn new(
   |            ^^^
25 |         db: Arc<Surreal<Client>>,
   |         ------------------------
26 |         auth_service: Arc<AuthService>,
   |         ------------------------------
27 |         markdown_processor: Arc<MarkdownProcessor>,
   |         ------------------------------------------
help: provide the arguments
   |
57 -     let document_service = DocumentService::new(db);
57 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
   |

error[E0308]: arguments to this method are incorrect
  --> src/routes/documents.rs:58:35
   |
58 |     let result = document_service.create_document(&space_slug, request, &user).await?;
   |                                   ^^^^^^^^^^^^^^^              -------  ----- unexpected argument #3 of type `&services::auth::User`
   |                                                                |
   |                                                                argument #2 of type `&str` is missing
   |
note: method defined here
  --> src/services/documents.rs:48:18
   |
48 |     pub async fn create_document(
   |                  ^^^^^^^^^^^^^^^
...
51 |         author_id: &str,
   |         ---------------
help: did you mean
   |
58 -     let result = document_service.create_document(&space_slug, request, &user).await?;
58 +     let result = document_service.create_document(&space_slug, /* &str */, request).await?;
   |

error[E0061]: this function takes 3 arguments but 1 argument was supplied
  --> src/routes/documents.rs:76:28
   |
76 |     let document_service = DocumentService::new(db);
   |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
   |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
  --> src/routes/documents.rs:76:49
   |
76 |     let document_service = DocumentService::new(db);
   |                                                 ^^
   = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
              found struct `Arc<services::database::Database>`
note: associated function defined here
  --> src/services/documents.rs:24:12
   |
24 |     pub fn new(
   |            ^^^
25 |         db: Arc<Surreal<Client>>,
   |         ------------------------
26 |         auth_service: Arc<AuthService>,
   |         ------------------------------
27 |         markdown_processor: Arc<MarkdownProcessor>,
   |         ------------------------------------------
help: provide the arguments
   |
76 -     let document_service = DocumentService::new(db);
76 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
   |

error[E0599]: no method named `get_document_by_slug` found for struct `DocumentService` in the current scope
   --> src/routes/documents.rs:77:35
    |
77  |     let result = document_service.get_document_by_slug(&space_slug, &doc_slug, user.as_ref()).await?;
    |                                   ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/services/documents.rs:15:1
    |
15  | pub struct DocumentService {
    | -------------------------- method `get_document_by_slug` not found for this struct
    |
help: there is a method `get_document` with a similar name, but with different arguments
   --> src/services/documents.rs:140:5
    |
140 |     pub async fn get_document(&self, document_id: &str) -> Result<Document, ApiError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: this function depends on never type fallback being `()`
  --> src/routes/documents.rs:71:1
   |
71 | / async fn get_document(
72 | |     State(db): State<Arc<Database>>,
73 | |     Path((space_slug, doc_slug)): Path<(String, String)>,
74 | |     OptionalUser(user): OptionalUser,
75 | | ) -> Result<Json<Value>> {
   | |________________________^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
   = help: specify the types explicitly
note: in edition 2024, the requirement `!: Serialize` will fail
  --> src/routes/documents.rs:79:13
   |
79 |       Ok(Json(json!({
   |  _____________^
80 | |         "success": true,
81 | |         "data": result,
82 | |         "message": "Document retrieved successfully"
83 | |     })))
   | |______^
   = note: this warning originates in the macro `$crate::json_internal` which comes from the expansion of the macro `json` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use `()` annotations to avoid fallback changes
   |
77 |     let result: () = document_service.get_document_by_slug(&space_slug, &doc_slug, user.as_ref()).await?;
   |               ++++

error[E0061]: this function takes 3 arguments but 1 argument was supplied
  --> src/routes/documents.rs:94:28
   |
94 |     let document_service = DocumentService::new(db);
   |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
   |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
  --> src/routes/documents.rs:94:49
   |
94 |     let document_service = DocumentService::new(db);
   |                                                 ^^
   = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
              found struct `Arc<services::database::Database>`
note: associated function defined here
  --> src/services/documents.rs:24:12
   |
24 |     pub fn new(
   |            ^^^
25 |         db: Arc<Surreal<Client>>,
   |         ------------------------
26 |         auth_service: Arc<AuthService>,
   |         ------------------------------
27 |         markdown_processor: Arc<MarkdownProcessor>,
   |         ------------------------------------------
help: provide the arguments
   |
94 -     let document_service = DocumentService::new(db);
94 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
   |

error[E0061]: this method takes 3 arguments but 4 arguments were supplied
   --> src/routes/documents.rs:95:35
    |
95  |     let result = document_service.update_document(&space_slug, &doc_slug, request, &user).await?;
    |                                   ^^^^^^^^^^^^^^^                                  ----- unexpected argument #4 of type `&services::auth::User`
    |
note: method defined here
   --> src/services/documents.rs:149:18
    |
149 |     pub async fn update_document(
    |                  ^^^^^^^^^^^^^^^
help: remove the extra argument
    |
95  -     let result = document_service.update_document(&space_slug, &doc_slug, request, &user).await?;
95  +     let result = document_service.update_document(&space_slug, &doc_slug, request).await?;
    |

error[E0061]: this function takes 3 arguments but 1 argument was supplied
   --> src/routes/documents.rs:113:28
    |
113 |     let document_service = DocumentService::new(db);
    |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
    |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
   --> src/routes/documents.rs:113:49
    |
113 |     let document_service = DocumentService::new(db);
    |                                                 ^^
    = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
               found struct `Arc<services::database::Database>`
note: associated function defined here
   --> src/services/documents.rs:24:12
    |
24  |     pub fn new(
    |            ^^^
25  |         db: Arc<Surreal<Client>>,
    |         ------------------------
26  |         auth_service: Arc<AuthService>,
    |         ------------------------------
27  |         markdown_processor: Arc<MarkdownProcessor>,
    |         ------------------------------------------
help: provide the arguments
    |
113 -     let document_service = DocumentService::new(db);
113 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
    |

error[E0061]: this method takes 2 arguments but 3 arguments were supplied
   --> src/routes/documents.rs:114:22
    |
114 |     document_service.delete_document(&space_slug, &doc_slug, &user).await?;
    |                      ^^^^^^^^^^^^^^^                         ----- unexpected argument #3 of type `&services::auth::User`
    |
note: method defined here
   --> src/services/documents.rs:224:18
    |
224 |     pub async fn delete_document(&self, document_id: &str, deleter_id: &str) -> Result<(), ApiError> {
    |                  ^^^^^^^^^^^^^^^
help: remove the extra argument
    |
114 -     document_service.delete_document(&space_slug, &doc_slug, &user).await?;
114 +     document_service.delete_document(&space_slug, &doc_slug).await?;
    |

error[E0061]: this function takes 3 arguments but 1 argument was supplied
   --> src/routes/documents.rs:132:28
    |
132 |     let document_service = DocumentService::new(db);
    |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
    |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
   --> src/routes/documents.rs:132:49
    |
132 |     let document_service = DocumentService::new(db);
    |                                                 ^^
    = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
               found struct `Arc<services::database::Database>`
note: associated function defined here
   --> src/services/documents.rs:24:12
    |
24  |     pub fn new(
    |            ^^^
25  |         db: Arc<Surreal<Client>>,
    |         ------------------------
26  |         auth_service: Arc<AuthService>,
    |         ------------------------------
27  |         markdown_processor: Arc<MarkdownProcessor>,
    |         ------------------------------------------
help: provide the arguments
    |
132 -     let document_service = DocumentService::new(db);
132 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
    |

error[E0599]: no method named `get_document_tree` found for struct `DocumentService` in the current scope
   --> src/routes/documents.rs:133:35
    |
133 |     let result = document_service.get_document_tree(&space_slug, user.as_ref()).await?;
    |                                   ^^^^^^^^^^^^^^^^^
    |
   ::: src/services/documents.rs:15:1
    |
15  | pub struct DocumentService {
    | -------------------------- method `get_document_tree` not found for this struct
    |
help: there is a method `get_document` with a similar name, but with different arguments
   --> src/services/documents.rs:140:5
    |
140 |     pub async fn get_document(&self, document_id: &str) -> Result<Document, ApiError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: this function depends on never type fallback being `()`
   --> src/routes/documents.rs:127:1
    |
127 | / async fn get_document_tree(
128 | |     State(db): State<Arc<Database>>,
129 | |     Path(space_slug): Path<String>,
130 | |     OptionalUser(user): OptionalUser,
131 | | ) -> Result<Json<Value>> {
    | |________________________^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: Serialize` will fail
   --> src/routes/documents.rs:135:13
    |
135 |       Ok(Json(json!({
    |  _____________^
136 | |         "success": true,
137 | |         "data": result,
138 | |         "message": "Document tree retrieved successfully"
139 | |     })))
    | |______^
    = note: this warning originates in the macro `$crate::json_internal` which comes from the expansion of the macro `json` (in Nightly builds, run with -Z macro-backtrace for more info)
help: use `()` annotations to avoid fallback changes
    |
133 |     let result: () = document_service.get_document_tree(&space_slug, user.as_ref()).await?;
    |               ++++

error[E0061]: this function takes 3 arguments but 1 argument was supplied
   --> src/routes/documents.rs:149:28
    |
149 |     let document_service = DocumentService::new(db);
    |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
    |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
   --> src/routes/documents.rs:149:49
    |
149 |     let document_service = DocumentService::new(db);
    |                                                 ^^
    = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
               found struct `Arc<services::database::Database>`
note: associated function defined here
   --> src/services/documents.rs:24:12
    |
24  |     pub fn new(
    |            ^^^
25  |         db: Arc<Surreal<Client>>,
    |         ------------------------
26  |         auth_service: Arc<AuthService>,
    |         ------------------------------
27  |         markdown_processor: Arc<MarkdownProcessor>,
    |         ------------------------------------------
help: provide the arguments
    |
149 -     let document_service = DocumentService::new(db);
149 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
    |

error[E0599]: no method named `get_document_by_slug` found for struct `DocumentService` in the current scope
   --> src/routes/documents.rs:152:39
    |
152 |     let parent_doc = document_service.get_document_by_slug(&space_slug, &doc_slug, user.as_ref()).await?;
    |                                       ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/services/documents.rs:15:1
    |
15  | pub struct DocumentService {
    | -------------------------- method `get_document_by_slug` not found for this struct
    |
help: there is a method `get_document` with a similar name, but with different arguments
   --> src/services/documents.rs:140:5
    |
140 |     pub async fn get_document(&self, document_id: &str) -> Result<Document, ApiError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 3 arguments but 1 argument was supplied
   --> src/routes/documents.rs:171:28
    |
171 |     let document_service = DocumentService::new(db);
    |                            ^^^^^^^^^^^^^^^^^^^^---- two arguments of type `Arc<AuthService>` and `Arc<MarkdownProcessor>` are missing
    |
note: expected `Arc<Surreal<Client>>`, found `Arc<Database>`
   --> src/routes/documents.rs:171:49
    |
171 |     let document_service = DocumentService::new(db);
    |                                                 ^^
    = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
               found struct `Arc<services::database::Database>`
note: associated function defined here
   --> src/services/documents.rs:24:12
    |
24  |     pub fn new(
    |            ^^^
25  |         db: Arc<Surreal<Client>>,
    |         ------------------------
26  |         auth_service: Arc<AuthService>,
    |         ------------------------------
27  |         markdown_processor: Arc<MarkdownProcessor>,
    |         ------------------------------------------
help: provide the arguments
    |
171 -     let document_service = DocumentService::new(db);
171 +     let document_service = DocumentService::new(/* Arc<Surreal<surrealdb::engine::remote::ws::Client>> */, /* Arc<AuthService> */, /* Arc<MarkdownProcessor> */);
    |

error[E0599]: no method named `get_document_by_slug` found for struct `DocumentService` in the current scope
   --> src/routes/documents.rs:174:37
    |
174 |     let document = document_service.get_document_by_slug(&space_slug, &doc_slug, user.as_ref()).await?;
    |                                     ^^^^^^^^^^^^^^^^^^^^
    |
   ::: src/services/documents.rs:15:1
    |
15  | pub struct DocumentService {
    | -------------------------- method `get_document_by_slug` not found for this struct
    |
help: there is a method `get_document` with a similar name, but with different arguments
   --> src/services/documents.rs:140:5
    |
140 |     pub async fn get_document(&self, document_id: &str) -> Result<Document, ApiError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0107]: type alias takes 1 generic argument but 2 generic arguments were supplied
   --> src/utils/auth.rs:86:6
    |
86  | ) -> Result<String, AppError> {
    |      ^^^^^^       ---------- help: remove the unnecessary generic argument
    |      |
    |      expected 1 generic argument
    |
note: type alias defined here, with 1 generic parameter: `T`
   --> src/error.rs:128:10
    |
128 | pub type Result<T> = std::result::Result<T, AppError>;
    |          ^^^^^^ -

error[E0283]: type annotations needed
  --> src/routes/files.rs:69:9
   |
69 |     let file_response = file.into();
   |         ^^^^^^^^^^^^^        ---- type must be known at this point
   |
   = note: cannot satisfy `_: From<FileUpload>`
   = note: required for `FileUpload` to implement `Into<_>`
help: consider giving `file_response` an explicit type
   |
69 |     let file_response: /* Type */ = file.into();
   |                      ++++++++++++

error[E0599]: no variant or associated item named `BadRequest` found for enum `AppError` in the current scope
   --> src/routes/search.rs:179:30
    |
179 |         return Err(ApiError::BadRequest("Tags parameter is required".to_string()));
    |                              ^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `BadRequest` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `bad_request` with a similar name
    |
179 -         return Err(ApiError::BadRequest("Tags parameter is required".to_string()));
179 +         return Err(ApiError::bad_request("Tags parameter is required".to_string()));
    |

error[E0277]: the trait bound `SpaceStats: std::default::Default` is not satisfied
   --> src/routes/spaces.rs:124:29
    |
124 |     let stats = space.stats.unwrap_or_default();
    |                             ^^^^^^^^^^^^^^^^^ the trait `std::default::Default` is not implemented for `SpaceStats`
    |
note: required by a bound in `std::option::Option::<T>::unwrap_or_default`
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/option.rs:1048:5
help: consider annotating `SpaceStats` with `#[derive(Default)]`
   --> src/models/space.rs:118:1
    |
118 + #[derive(Default)]
119 | pub struct SpaceStats {
    |

warning: unused variable: `search_service`
  --> src/routes/stats.rs:55:11
   |
55 |     State(search_service): State<Arc<SearchService>>,
   |           ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_search_service`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `query`
   --> src/routes/versions.rs:230:11
    |
230 |     Query(query): Query<DateRangeQuery>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

error[E0308]: mismatched types
   --> src/services/auth.rs:294:77
    |
294 |             let has_permission = self.check_permission(user_id, permission, token).await?;
    |                                       ----------------                      ^^^^^ expected `Option<&str>`, found `&str`
    |                                       |
    |                                       arguments to this method are incorrect
    |
    = note:   expected enum `std::option::Option<&str>`
            found reference `&str`
note: method defined here
   --> src/services/auth.rs:238:18
    |
238 |     pub async fn check_permission(&self, user_id: &str, permission: &str, resource_id: Option<&str>) -> Result<bool> {
    |                  ^^^^^^^^^^^^^^^^                                         -------------------------
help: try wrapping the expression in `Some`
    |
294 |             let has_permission = self.check_permission(user_id, permission, Some(token)).await?;
    |                                                                             +++++     +

error[E0277]: `?` couldn't convert the error to `AppError`
  --> src/services/comments.rs:28:27
   |
28 |         request.validate()?;
   |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
   |
note: `AppError` needs to implement `From<ValidationErrors>`
  --> src/error.rs:10:1
   |
10 | pub enum AppError {
   | ^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AppError` implements `From<anyhow::Error>`
             `AppError` implements `From<jsonwebtoken::errors::Error>`
             `AppError` implements `From<reqwest::Error>`
             `AppError` implements `From<serde_json::Error>`
             `AppError` implements `From<std::io::Error>`
             `AppError` implements `From<surrealdb::Error>`

error[E0308]: mismatched types
   --> src/services/comments.rs:38:13
    |
37  |         let mut comment = Comment::new(
    |                           ------------ arguments to this function are incorrect
38  |             document_thing,
    |             ^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |             |
    |             expected `String`, found `Thing`
    |
note: associated function defined here
   --> src/models/comment.rs:114:12
    |
114 |     pub fn new(document_id: String, author_id: String, content: String) -> Self {
    |            ^^^ -------------------

error[E0599]: no method named `with_parent` found for struct `Comment` in the current scope
  --> src/services/comments.rs:44:31
   |
44 |             comment = comment.with_parent(parent_id);
   |                               ^^^^^^^^^^^ method not found in `Comment`
   |
  ::: src/models/comment.rs:7:1
   |
7  | pub struct Comment {
   | ------------------ method `with_parent` not found for this struct

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:51:36
    |
51  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:56:38
    |
56  |             .ok_or_else(|| ApiError::InternalServerError("Failed to create comment".to_string()))
    |                                      ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
56  -             .ok_or_else(|| ApiError::InternalServerError("Failed to create comment".to_string()))
56  +             .ok_or_else(|| ApiError::internal_server_error("Failed to create comment".to_string()))
    |

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:63:36
    |
63  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `AppError`
  --> src/services/comments.rs:74:27
   |
74 |         request.validate()?;
   |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
   |
note: `AppError` needs to implement `From<ValidationErrors>`
  --> src/error.rs:10:1
   |
10 | pub enum AppError {
   | ^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AppError` implements `From<anyhow::Error>`
             `AppError` implements `From<jsonwebtoken::errors::Error>`
             `AppError` implements `From<reqwest::Error>`
             `AppError` implements `From<serde_json::Error>`
             `AppError` implements `From<std::io::Error>`
             `AppError` implements `From<surrealdb::Error>`

error[E0599]: no method named `update_content` found for struct `Comment` in the current scope
  --> src/services/comments.rs:79:21
   |
79 |             comment.update_content(content, editor_id.to_string());
   |                     ^^^^^^^^^^^^^^ method not found in `Comment`
   |
  ::: src/models/comment.rs:7:1
   |
7  | pub struct Comment {
   | ------------------ method `update_content` not found for this struct

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:86:36
    |
86  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:88:41
    |
88  |         updated.ok_or_else(|| ApiError::InternalServerError("Failed to update comment".to_string()))
    |                                         ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
88  -         updated.ok_or_else(|| ApiError::InternalServerError("Failed to update comment".to_string()))
88  +         updated.ok_or_else(|| ApiError::internal_server_error("Failed to update comment".to_string()))
    |

error[E0599]: no method named `soft_delete` found for struct `Comment` in the current scope
  --> src/services/comments.rs:93:17
   |
93 |         comment.soft_delete(deleter_id.to_string());
   |                 ^^^^^^^^^^^ method not found in `Comment`
   |
  ::: src/models/comment.rs:7:1
   |
7  | pub struct Comment {
   | ------------------ method `soft_delete` not found for this struct

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:99:36
    |
99  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:127:36
    |
127 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:129:36
    |
129 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:147:36
    |
147 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:149:36
    |
149 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:181:36
    |
181 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:183:36
    |
183 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:200:36
    |
200 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:202:36
    |
202 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0609]: no field `liked_by` on type `Comment`
   --> src/services/comments.rs:219:20
    |
219 |         if comment.liked_by.contains(&user_id.to_string()) {
    |                    ^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `document_id`, `parent_id`, `author_id`, `content` ... and 4 others

error[E0599]: no method named `unlike` found for struct `Comment` in the current scope
   --> src/services/comments.rs:220:21
    |
220 |             comment.unlike(user_id.to_string());
    |                     ^^^^^^ method not found in `Comment`
    |
   ::: src/models/comment.rs:7:1
    |
7   | pub struct Comment {
    | ------------------ method `unlike` not found for this struct

error[E0599]: no method named `like` found for struct `Comment` in the current scope
   --> src/services/comments.rs:222:21
    |
222 |             comment.like(user_id.to_string());
    |                     ^^^^ method not found in `Comment`
    |
   ::: src/models/comment.rs:7:1
    |
7   | pub struct Comment {
    | ------------------ method `like` not found for this struct

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:229:36
    |
229 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:231:41
    |
231 |         updated.ok_or_else(|| ApiError::InternalServerError("Failed to update comment".to_string()))
    |                                         ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
231 -         updated.ok_or_else(|| ApiError::InternalServerError("Failed to update comment".to_string()))
231 +         updated.ok_or_else(|| ApiError::internal_server_error("Failed to update comment".to_string()))
    |

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:246:36
    |
246 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:248:36
    |
248 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:278:36
    |
278 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/comments.rs:280:36
    |
280 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `AppError`
  --> src/services/documents.rs:54:27
   |
54 |         request.validate()?;
   |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
   |
note: `AppError` needs to implement `From<ValidationErrors>`
  --> src/error.rs:10:1
   |
10 | pub enum AppError {
   | ^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AppError` implements `From<anyhow::Error>`
             `AppError` implements `From<jsonwebtoken::errors::Error>`
             `AppError` implements `From<reqwest::Error>`
             `AppError` implements `From<serde_json::Error>`
             `AppError` implements `From<std::io::Error>`
             `AppError` implements `From<surrealdb::Error>`

error[E0599]: no method named `process` found for struct `Arc<MarkdownProcessor>` in the current scope
  --> src/services/documents.rs:67:49
   |
67 |         let processed = self.markdown_processor.process(&request.content).await?;
   |                                                 ^^^^^^^ method not found in `Arc<MarkdownProcessor>`

error[E0061]: this function takes 4 arguments but 5 arguments were supplied
   --> src/services/documents.rs:76:28
    |
76  |         let mut document = Document::new(
    |                            ^^^^^^^^^^^^^
77  |             space_thing,
    |             ----------- unexpected argument #1 of type `surrealdb::sql::Thing`
...
80  |             request.content.clone(),
    |             -----------------------
    |             |
    |             unexpected argument #4 of type `std::option::Option<std::string::String>`
    |             argument #4 of type `std::string::String` is missing
    |
note: associated function defined here
   --> src/models/document.rs:193:12
    |
193 |     pub fn new(
    |            ^^^
...
197 |         author_id: String,
    |         -----------------
help: did you mean
    |
76  -         let mut document = Document::new(
77  -             space_thing,
78  -             request.title.clone(),
79  -             request.slug.clone(),
80  -             request.content.clone(),
81  -             author_id.to_string(),
82  -         );
76  +         let mut document = Document::new(author_id.to_string(), request.title.clone(), request.slug.clone(), /* std::string::String */);
    |

error[E0599]: no method named `with_parent` found for struct `document::Document` in the current scope
  --> src/services/documents.rs:85:33
   |
85 |             document = document.with_parent(parent_id);
   |                                 ^^^^^^^^^^^ method not found in `Document`
   |
  ::: src/models/document.rs:7:1
   |
7  | pub struct Document {
   | ------------------- method `with_parent` not found for this struct

error[E0609]: no field `description` on type `CreateDocumentRequest`
  --> src/services/documents.rs:88:44
   |
88 |         if let Some(description) = request.description {
   |                                            ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `title`, `slug`, `content`, `excerpt`, `is_published` ... and 3 others

error[E0599]: no method named `with_description` found for struct `document::Document` in the current scope
  --> src/services/documents.rs:89:33
   |
89 |             document = document.with_description(description);
   |                                 ^^^^^^^^^^^^^^^^ method not found in `Document`
   |
  ::: src/models/document.rs:7:1
   |
7  | pub struct Document {
   | ------------------- method `with_description` not found for this struct

error[E0609]: no field `word_count` on type `document::Document`
  --> src/services/documents.rs:93:18
   |
93 |         document.word_count = processed.word_count;
   |                  ^^^^^^^^^^ unknown field
   |
   = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0609]: no field `reading_time` on type `document::Document`
  --> src/services/documents.rs:94:18
   |
94 |         document.reading_time = processed.reading_time;
   |                  ^^^^^^^^^^^^ unknown field
   |
help: one of the expressions' fields has a field of the same name
   |
94 |         document.metadata.reading_time = processed.reading_time;
   |                  +++++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:100:36
    |
100 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:105:38
    |
105 |             .ok_or_else(|| ApiError::InternalServerError("Failed to create document".to_string()))?;
    |                                      ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
105 -             .ok_or_else(|| ApiError::InternalServerError("Failed to create document".to_string()))?;
105 +             .ok_or_else(|| ApiError::internal_server_error("Failed to create document".to_string()))?;
    |

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:144:36
    |
144 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `AppError`
   --> src/services/documents.rs:155:27
    |
155 |         request.validate()?;
    |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
    |                 |
    |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
    |
note: `AppError` needs to implement `From<ValidationErrors>`
   --> src/error.rs:10:1
    |
10  | pub enum AppError {
    | ^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `From<T>`:
              `AppError` implements `From<anyhow::Error>`
              `AppError` implements `From<jsonwebtoken::errors::Error>`
              `AppError` implements `From<reqwest::Error>`
              `AppError` implements `From<serde_json::Error>`
              `AppError` implements `From<std::io::Error>`
              `AppError` implements `From<surrealdb::Error>`

error[E0599]: no method named `process` found for struct `Arc<MarkdownProcessor>` in the current scope
   --> src/services/documents.rs:164:53
    |
164 |             let processed = self.markdown_processor.process(&content).await?;
    |                                                     ^^^^^^^ method not found in `Arc<MarkdownProcessor>`

error[E0609]: no field `word_count` on type `document::Document`
   --> src/services/documents.rs:167:22
    |
167 |             document.word_count = processed.word_count;
    |                      ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0609]: no field `reading_time` on type `document::Document`
   --> src/services/documents.rs:168:22
    |
168 |             document.reading_time = processed.reading_time;
    |                      ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
168 |             document.metadata.reading_time = processed.reading_time;
    |                      +++++++++

error[E0609]: no field `description` on type `UpdateDocumentRequest`
   --> src/services/documents.rs:171:44
    |
171 |         if let Some(description) = request.description {
    |                                            ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `title`, `content`, `excerpt`, `is_published`, `parent_id` ... and 2 others

error[E0609]: no field `description` on type `document::Document`
   --> src/services/documents.rs:172:22
    |
172 |             document.description = Some(description);
    |                      ^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
172 |             document.metadata.seo.description = Some(description);
    |                      +++++++++++++

error[E0609]: no field `is_public` on type `UpdateDocumentRequest`
   --> src/services/documents.rs:175:42
    |
175 |         if let Some(is_public) = request.is_public {
    |                                          ^^^^^^^^^ unknown field
    |
    = note: available fields are: `title`, `content`, `excerpt`, `is_published`, `parent_id` ... and 2 others

error[E0609]: no field `is_public` on type `document::Document`
   --> src/services/documents.rs:176:22
    |
176 |             document.is_public = is_public;
    |                      ^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0609]: no field `updated_by` on type `document::Document`
   --> src/services/documents.rs:179:18
    |
179 |         document.updated_by = Some(editor_id.to_string());
    |                  ^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
179 -         document.updated_by = Some(editor_id.to_string());
179 +         document.updated_at = Some(editor_id.to_string());
    |

error[E0308]: mismatched types
   --> src/services/documents.rs:180:31
    |
180 |         document.updated_at = surrealdb::sql::Datetime::default();
    |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<DateTime<Utc>>`, found `Datetime`
    |         |
    |         expected due to the type of this binding
    |
    = note: expected enum `std::option::Option<DateTime<Utc>>`
             found struct `surrealdb::sql::Datetime`

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:186:36
    |
186 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:189:38
    |
189 |             .ok_or_else(|| ApiError::InternalServerError("Failed to update document".to_string()))?;
    |                                      ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
189 -             .ok_or_else(|| ApiError::InternalServerError("Failed to update document".to_string()))?;
189 +             .ok_or_else(|| ApiError::internal_server_error("Failed to update document".to_string()))?;
    |

error[E0599]: no method named `soft_delete` found for struct `document::Document` in the current scope
   --> src/services/documents.rs:227:18
    |
227 |         document.soft_delete(deleter_id.to_string());
    |                  ^^^^^^^^^^^ method not found in `Document`
    |
   ::: src/models/document.rs:7:1
    |
7   | pub struct Document {
    | ------------------- method `soft_delete` not found for this struct

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:233:36
    |
233 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:265:36
    |
265 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:267:36
    |
267 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:287:36
    |
287 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:289:36
    |
289 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> src/services/documents.rs:305:39
    |
305 |             document.parent_id = Some(Thing::from(("document", parent_id.as_str())));
    |                                  ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method: `.to_string()`
    |                                  |    |
    |                                  |    expected `String`, found `Thing`
    |                                  arguments to this enum variant are incorrect
    |
help: the type constructed contains `surrealdb::sql::Thing` due to the type of the argument passed
   --> src/services/documents.rs:305:34
    |
305 |             document.parent_id = Some(Thing::from(("document", parent_id.as_str())));
    |                                  ^^^^^---------------------------------------------^
    |                                       |
    |                                       this argument influences the type of `Some`
note: tuple variant defined here
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/option.rs:580:5

error[E0609]: no field `order_index` on type `document::Document`
   --> src/services/documents.rs:311:22
    |
311 |             document.order_index = order_index;
    |                      ^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0609]: no field `updated_by` on type `document::Document`
   --> src/services/documents.rs:314:18
    |
314 |         document.updated_by = Some(mover_id.to_string());
    |                  ^^^^^^^^^^ unknown field
    |
help: a field with a similar name exists
    |
314 -         document.updated_by = Some(mover_id.to_string());
314 +         document.updated_at = Some(mover_id.to_string());
    |

error[E0308]: mismatched types
   --> src/services/documents.rs:315:31
    |
315 |         document.updated_at = surrealdb::sql::Datetime::default();
    |         -------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Option<DateTime<Utc>>`, found `Datetime`
    |         |
    |         expected due to the type of this binding
    |
    = note: expected enum `std::option::Option<DateTime<Utc>>`
             found struct `surrealdb::sql::Datetime`

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:321:36
    |
321 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:323:41
    |
323 |         updated.ok_or_else(|| ApiError::InternalServerError("Failed to move document".to_string()))
    |                                         ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
323 -         updated.ok_or_else(|| ApiError::InternalServerError("Failed to move document".to_string()))
323 +         updated.ok_or_else(|| ApiError::internal_server_error("Failed to move document".to_string()))
    |

error[E0061]: this function takes 4 arguments but 5 arguments were supplied
   --> src/services/documents.rs:357:32
    |
357 |         let mut new_document = Document::new(
    |                                ^^^^^^^^^^^^^
...
362 |             duplicator_id.to_string(),
    |             ------------------------- unexpected argument #5 of type `std::string::String`
    |
note: associated function defined here
   --> src/models/document.rs:193:12
    |
193 |     pub fn new(
    |            ^^^
help: remove the extra argument
    |
361 -             original.content.clone(),
362 -             duplicator_id.to_string(),
361 +             original.content.clone(),
    |

error[E0609]: no field `description` on type `document::Document`
   --> src/services/documents.rs:365:22
    |
365 |         new_document.description = original.description.clone();
    |                      ^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
365 |         new_document.metadata.seo.description = original.description.clone();
    |                      +++++++++++++

error[E0609]: no field `description` on type `document::Document`
   --> src/services/documents.rs:365:45
    |
365 |         new_document.description = original.description.clone();
    |                                             ^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
365 |         new_document.description = original.metadata.seo.description.clone();
    |                                             +++++++++++++

error[E0609]: no field `word_count` on type `document::Document`
   --> src/services/documents.rs:367:22
    |
367 |         new_document.word_count = original.word_count;
    |                      ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0609]: no field `word_count` on type `document::Document`
   --> src/services/documents.rs:367:44
    |
367 |         new_document.word_count = original.word_count;
    |                                            ^^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0609]: no field `reading_time` on type `document::Document`
   --> src/services/documents.rs:368:22
    |
368 |         new_document.reading_time = original.reading_time;
    |                      ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
368 |         new_document.metadata.reading_time = original.reading_time;
    |                      +++++++++

error[E0609]: no field `reading_time` on type `document::Document`
   --> src/services/documents.rs:368:46
    |
368 |         new_document.reading_time = original.reading_time;
    |                                              ^^^^^^^^^^^^ unknown field
    |
help: one of the expressions' fields has a field of the same name
    |
368 |         new_document.reading_time = original.metadata.reading_time;
    |                                              +++++++++

error[E0609]: no field `is_public` on type `document::Document`
   --> src/services/documents.rs:369:22
    |
369 |         new_document.is_public = original.is_public;
    |                      ^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0609]: no field `is_public` on type `document::Document`
   --> src/services/documents.rs:369:43
    |
369 |         new_document.is_public = original.is_public;
    |                                           ^^^^^^^^^ unknown field
    |
    = note: available fields are: `id`, `space_id`, `title`, `slug`, `content` ... and 10 others

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:375:36
    |
375 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:380:38
    |
380 |             .ok_or_else(|| ApiError::InternalServerError("Failed to duplicate document".to_string()))?;
    |                                      ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
380 -             .ok_or_else(|| ApiError::InternalServerError("Failed to duplicate document".to_string()))?;
380 +             .ok_or_else(|| ApiError::internal_server_error("Failed to duplicate document".to_string()))?;
    |

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:413:36
    |
413 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:415:36
    |
415 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:438:36
    |
438 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/documents.rs:440:36
    |
440 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `AppError`
  --> src/services/file_upload.rs:46:27
   |
46 |         request.validate()?;
   |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
   |
note: `AppError` needs to implement `From<ValidationErrors>`
  --> src/error.rs:10:1
   |
10 | pub enum AppError {
   | ^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AppError` implements `From<anyhow::Error>`
             `AppError` implements `From<jsonwebtoken::errors::Error>`
             `AppError` implements `From<reqwest::Error>`
             `AppError` implements `From<serde_json::Error>`
             `AppError` implements `From<std::io::Error>`
             `AppError` implements `From<surrealdb::Error>`

error[E0599]: no method named `get` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/file_upload.rs:153:56
    |
153 |         let created_file: Option<FileUpload> = self.db.get()
    |                                                        ^^^ method not found in `Arc<Database>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `get`, perhaps you need to implement one of them:
            candidate #1: `BKeys`
            candidate #2: `SliceIndex`
            candidate #3: `icu_properties::names::PropertyEnumToValueNameLookup`
            candidate #4: `icu_provider::baked::DataStore`
            candidate #5: `object_store::ObjectStore`
            candidate #6: `rustls::server::server_conn::StoresServerSessions`
help: one of the expressions' fields has a method of the same name
    |
153 |         let created_file: Option<FileUpload> = self.db.config.database.url.get()
    |                                                        ++++++++++++++++++++

error[E0599]: no method named `get` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/file_upload.rs:174:48
    |
174 |         let file: Option<FileUpload> = self.db.get()
    |                                                ^^^ method not found in `Arc<Database>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `get`, perhaps you need to implement one of them:
            candidate #1: `BKeys`
            candidate #2: `SliceIndex`
            candidate #3: `icu_properties::names::PropertyEnumToValueNameLookup`
            candidate #4: `icu_provider::baked::DataStore`
            candidate #5: `object_store::ObjectStore`
            candidate #6: `rustls::server::server_conn::StoresServerSessions`
help: one of the expressions' fields has a method of the same name
    |
174 |         let file: Option<FileUpload> = self.db.config.database.url.get()
    |                                                ++++++++++++++++++++

error[E0599]: no method named `get` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/file_upload.rs:227:48
    |
227 |         let total_count: Option<i64> = self.db.get()
    |                                                ^^^ method not found in `Arc<Database>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `get`, perhaps you need to implement one of them:
            candidate #1: `BKeys`
            candidate #2: `SliceIndex`
            candidate #3: `icu_properties::names::PropertyEnumToValueNameLookup`
            candidate #4: `icu_provider::baked::DataStore`
            candidate #5: `object_store::ObjectStore`
            candidate #6: `rustls::server::server_conn::StoresServerSessions`
help: one of the expressions' fields has a method of the same name
    |
227 |         let total_count: Option<i64> = self.db.config.database.url.get()
    |                                                ++++++++++++++++++++

error[E0599]: no method named `get` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/file_upload.rs:242:46
    |
242 |         let files: Vec<FileUpload> = self.db.get()
    |                                              ^^^ method not found in `Arc<Database>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `get`, perhaps you need to implement one of them:
            candidate #1: `BKeys`
            candidate #2: `SliceIndex`
            candidate #3: `icu_properties::names::PropertyEnumToValueNameLookup`
            candidate #4: `icu_provider::baked::DataStore`
            candidate #5: `object_store::ObjectStore`
            candidate #6: `rustls::server::server_conn::StoresServerSessions`
help: one of the expressions' fields has a method of the same name
    |
242 |         let files: Vec<FileUpload> = self.db.config.database.url.get()
    |                                              ++++++++++++++++++++

error[E0599]: no method named `get` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/file_upload.rs:280:45
    |
280 |         let _: Option<FileUpload> = self.db.get()
    |                                             ^^^ method not found in `Arc<Database>`
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `get`, perhaps you need to implement one of them:
            candidate #1: `BKeys`
            candidate #2: `SliceIndex`
            candidate #3: `icu_properties::names::PropertyEnumToValueNameLookup`
            candidate #4: `icu_provider::baked::DataStore`
            candidate #5: `object_store::ObjectStore`
            candidate #6: `rustls::server::server_conn::StoresServerSessions`
help: one of the expressions' fields has a method of the same name
    |
280 |         let _: Option<FileUpload> = self.db.config.database.url.get()
    |                                             ++++++++++++++++++++

error[E0599]: no method named `upsert` found for struct `Surreal` in the current scope
   --> src/services/search.rs:27:14
    |
26  |           let _: Option<SearchIndex> = self.db.client
    |  ______________________________________-
27  | |             .upsert(("search_index", index.document_id.to_string()))
    | |_____________-^^^^^^
    |
help: there is a method `set` with a similar name, but with different arguments
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/surrealdb-1.5.6/src/api/method/mod.rs:349:2
    |
349 |     pub fn set(&self, key: impl Into<String>, value: impl Serialize) -> Set<C> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `delete` found for struct `Arc<services::database::Database>` in the current scope
  --> src/services/search.rs:37:14
   |
36 |           let _: Option<SearchIndex> = self.db
   |  ______________________________________-
37 | |             .delete(("search_index", document_id))
   | |             -^^^^^^ method not found in `Arc<Database>`
   | |_____________|
   |
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following trait defines an item `delete`, perhaps you need to implement it:
           candidate #1: `object_store::ObjectStore`
help: one of the expressions' fields has a method of the same name
   |
37 |             .client.delete(("search_index", document_id))
   |              +++++++

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/search.rs:109:36
    |
109 |         let mut db_query = self.db.query(&full_query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
109 |         let mut db_query = self.db.client.query(&full_query);
    |                                    +++++++

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/search.rs:195:36
    |
195 |         let mut db_query = self.db.query(&full_query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
195 |         let mut db_query = self.db.client.query(&full_query);
    |                                    +++++++

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/search.rs:298:14
    |
297 |           let results: Vec<SearchIndex> = self.db
    |  _________________________________________-
298 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
298 |             .client.query(query)
    |              +++++++

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/search.rs:362:14
    |
361 |           let documents: Vec<surrealdb::sql::Value> = self.db
    |  _____________________________________________________-
362 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
362 |             .client.query(query)
    |              +++++++

error[E0282]: type annotations needed for `HashMap<std::string::String, _>`
  --> src/services/spaces.rs:90:13
   |
90 |         let mut params = std::collections::HashMap::new();
   |             ^^^^^^^^^^   -------------------------------- type must be known at this point
   |
help: consider giving `params` an explicit type, where the type for type parameter `V` is specified
   |
90 |         let mut params: HashMap<_, V> = std::collections::HashMap::new();
   |                       +++++++++++++++

error[E0277]: `?` couldn't convert the error to `AppError`
  --> src/services/tags.rs:27:27
   |
27 |         request.validate()?;
   |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
   |
note: `AppError` needs to implement `From<ValidationErrors>`
  --> src/error.rs:10:1
   |
10 | pub enum AppError {
   | ^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AppError` implements `From<anyhow::Error>`
             `AppError` implements `From<jsonwebtoken::errors::Error>`
             `AppError` implements `From<reqwest::Error>`
             `AppError` implements `From<serde_json::Error>`
             `AppError` implements `From<std::io::Error>`
             `AppError` implements `From<surrealdb::Error>`

error[E0599]: no method named `create` found for struct `Arc<services::database::Database>` in the current scope
  --> src/services/tags.rs:45:14
   |
44 |           let created: Vec<Tag> = self.db
   |  _________________________________-
45 | |             .create("tag")
   | |             -^^^^^^ method not found in `Arc<Database>`
   | |_____________|
   |
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `create`, perhaps you need to implement one of them:
           candidate #1: `regex_syntax::hir::interval::Interval`
           candidate #2: `regex_syntax::hir::interval::Interval`
help: one of the expressions' fields has a method of the same name
   |
45 |             .client.create("tag")
   |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:48:36
    |
48  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:53:38
    |
53  |             .ok_or_else(|| ApiError::InternalServerError("Failed to create tag".to_string()))
    |                                      ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
53  -             .ok_or_else(|| ApiError::InternalServerError("Failed to create tag".to_string()))
53  +             .ok_or_else(|| ApiError::internal_server_error("Failed to create tag".to_string()))
    |

error[E0599]: no method named `select` found for struct `Arc<services::database::Database>` in the current scope
  --> src/services/tags.rs:58:14
   |
57 |           let tag: Option<Tag> = self.db
   |  ________________________________-
58 | |             .select(("tag", tag_id))
   | |             -^^^^^^ method not found in `Arc<Database>`
   | |_____________|
   |
   |
help: one of the expressions' fields has a method of the same name
   |
58 |             .client.select(("tag", tag_id))
   |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:60:36
    |
60  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `AppError`
  --> src/services/tags.rs:71:27
   |
71 |         request.validate()?;
   |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
   |
note: `AppError` needs to implement `From<ValidationErrors>`
  --> src/error.rs:10:1
   |
10 | pub enum AppError {
   | ^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AppError` implements `From<anyhow::Error>`
             `AppError` implements `From<jsonwebtoken::errors::Error>`
             `AppError` implements `From<reqwest::Error>`
             `AppError` implements `From<serde_json::Error>`
             `AppError` implements `From<std::io::Error>`
             `AppError` implements `From<surrealdb::Error>`

error[E0599]: no method named `update` found for struct `Arc<services::database::Database>` in the current scope
  --> src/services/tags.rs:95:14
   |
94 |           let updated: Option<Tag> = self.db
   |  ____________________________________-
95 | |             .update(("tag", tag_id))
   | |             -^^^^^^ method not found in `Arc<Database>`
   | |_____________|
   |
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `update`, perhaps you need to implement one of them:
           candidate #1: `digest::Update`
           candidate #2: `digest::digest::Digest`
           candidate #3: `digest::digest::DynDigest`
           candidate #4: `digest::mac::Mac`
           candidate #5: `itertools::Itertools`
           candidate #6: `itertools::Itertools`
           candidate #7: `rayon::iter::ParallelIterator`
help: one of the expressions' fields has a method of the same name
   |
95 |             .client.update(("tag", tag_id))
   |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:98:36
    |
98  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:100:41
    |
100 |         updated.ok_or_else(|| ApiError::InternalServerError("Failed to update tag".to_string()))
    |                                         ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
100 -         updated.ok_or_else(|| ApiError::InternalServerError("Failed to update tag".to_string()))
100 +         updated.ok_or_else(|| ApiError::internal_server_error("Failed to update tag".to_string()))
    |

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:107:14
    |
106 |           let _: Vec<surrealdb::sql::Value> = self.db
    |  _____________________________________________-
107 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
107 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:110:36
    |
110 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:112:36
    |
112 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `delete` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:116:14
    |
115 |           let _: Option<Tag> = self.db
    |  ______________________________-
116 | |             .delete(("tag", tag_id))
    | |             -^^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `delete`, perhaps you need to implement it:
            candidate #1: `object_store::ObjectStore`
help: one of the expressions' fields has a method of the same name
    |
116 |             .client.delete(("tag", tag_id))
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:118:36
    |
118 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:137:36
    |
137 |         let mut db_query = self.db.query(query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
137 |         let mut db_query = self.db.client.query(query);
    |                                    +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:147:36
    |
147 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:149:36
    |
149 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:161:36
    |
161 |         let mut db_query = self.db.query(query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
161 |         let mut db_query = self.db.client.query(query);
    |                                    +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:170:36
    |
170 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:172:36
    |
172 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:184:36
    |
184 |         let mut db_query = self.db.query(search_query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
184 |         let mut db_query = self.db.client.query(search_query);
    |                                    +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:194:36
    |
194 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:196:36
    |
196 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `create` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:222:22
    |
221 |                   let created: Vec<DocumentTag> = self.db
    |  _________________________________________________-
222 | |                     .create("document_tag")
    | |                     -^^^^^^ method not found in `Arc<Database>`
    | |_____________________|
    |
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `create`, perhaps you need to implement one of them:
            candidate #1: `regex_syntax::hir::interval::Interval`
            candidate #2: `regex_syntax::hir::interval::Interval`
help: one of the expressions' fields has a method of the same name
    |
222 |                     .client.create("document_tag")
    |                      +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:225:44
    |
225 |                     .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                            ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:247:14
    |
246 |           let _: Vec<surrealdb::sql::Value> = self.db
    |  _____________________________________________-
247 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
247 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:251:36
    |
251 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:253:36
    |
253 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:270:14
    |
269 |           let tags: Vec<Tag> = self.db
    |  ______________________________-
270 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
270 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:273:36
    |
273 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:275:36
    |
275 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:296:14
    |
295 |           let results: Vec<surrealdb::sql::Value> = self.db
    |  ___________________________________________________-
296 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
296 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:301:36
    |
301 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:303:36
    |
303 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:320:36
    |
320 |         let mut db_query = self.db.query(total_query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
320 |         let mut db_query = self.db.client.query(total_query);
    |                                    +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:327:36
    |
327 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:329:36
    |
329 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:342:36
    |
342 |         let mut db_query = self.db.query(used_query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
342 |         let mut db_query = self.db.client.query(used_query);
    |                                    +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:349:36
    |
349 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:351:36
    |
351 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:374:36
    |
374 |         let mut db_query = self.db.query(query);
    |                                    ^^^^^ method not found in `Arc<Database>`
    |
help: one of the expressions' fields has a method of the same name
    |
374 |         let mut db_query = self.db.client.query(query);
    |                                    +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:382:36
    |
382 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:384:36
    |
384 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:398:14
    |
397 |           let result: Vec<surrealdb::sql::Value> = self.db
    |  __________________________________________________-
398 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
398 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:402:36
    |
402 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:404:36
    |
404 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:418:14
    |
417 |           let _: Vec<surrealdb::sql::Value> = self.db
    |  _____________________________________________-
418 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
418 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:421:36
    |
421 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:423:36
    |
423 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/tags.rs:432:14
    |
431 |           let _: Vec<surrealdb::sql::Value> = self.db
    |  _____________________________________________-
432 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
432 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:435:36
    |
435 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/tags.rs:437:36
    |
437 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `AppError`
  --> src/services/versions.rs:28:27
   |
28 |         request.validate()?;
   |                 ----------^ the trait `From<ValidationErrors>` is not implemented for `AppError`
   |                 |
   |                 this can't be annotated with `?` because it has type `Result<_, ValidationErrors>`
   |
note: `AppError` needs to implement `From<ValidationErrors>`
  --> src/error.rs:10:1
   |
10 | pub enum AppError {
   | ^^^^^^^^^^^^^^^^^
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             `AppError` implements `From<anyhow::Error>`
             `AppError` implements `From<jsonwebtoken::errors::Error>`
             `AppError` implements `From<reqwest::Error>`
             `AppError` implements `From<serde_json::Error>`
             `AppError` implements `From<std::io::Error>`
             `AppError` implements `From<surrealdb::Error>`

error[E0599]: no method named `create` found for struct `Arc<services::database::Database>` in the current scope
  --> src/services/versions.rs:49:14
   |
48 |           let created: Vec<DocumentVersion> = self.db
   |  _____________________________________________-
49 | |             .create("document_version")
   | |             -^^^^^^ method not found in `Arc<Database>`
   | |_____________|
   |
   |
   = help: items from traits can only be used if the trait is implemented and in scope
   = note: the following traits define an item `create`, perhaps you need to implement one of them:
           candidate #1: `regex_syntax::hir::interval::Interval`
           candidate #2: `regex_syntax::hir::interval::Interval`
help: one of the expressions' fields has a method of the same name
   |
49 |             .client.create("document_version")
   |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:52:36
    |
52  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `InternalServerError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:57:38
    |
57  |             .ok_or_else(|| ApiError::InternalServerError("Failed to create version".to_string()))
    |                                      ^^^^^^^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `InternalServerError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `internal_server_error` with a similar name
    |
57  -             .ok_or_else(|| ApiError::InternalServerError("Failed to create version".to_string()))
57  +             .ok_or_else(|| ApiError::internal_server_error("Failed to create version".to_string()))
    |

error[E0599]: no method named `select` found for struct `Arc<services::database::Database>` in the current scope
  --> src/services/versions.rs:62:14
   |
61 |           let version: Option<DocumentVersion> = self.db
   |  ________________________________________________-
62 | |             .select(("document_version", version_id))
   | |             -^^^^^^ method not found in `Arc<Database>`
   | |_____________|
   |
   |
help: one of the expressions' fields has a method of the same name
   |
62 |             .client.select(("document_version", version_id))
   |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:64:36
    |
64  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
  --> src/services/versions.rs:85:14
   |
84 |           let versions: Vec<DocumentVersion> = self.db
   |  ______________________________________________-
85 | |             .query(query)
   | |             -^^^^^ method not found in `Arc<Database>`
   | |_____________|
   |
   |
help: one of the expressions' fields has a method of the same name
   |
85 |             .client.query(query)
   |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:90:36
    |
90  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:92:36
    |
92  |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/versions.rs:106:14
    |
105 |           let versions: Vec<DocumentVersion> = self.db
    |  ______________________________________________-
106 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
106 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:109:36
    |
109 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:111:36
    |
111 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `BadRequest` found for enum `AppError` in the current scope
   --> src/services/versions.rs:126:34
    |
126 |             return Err(ApiError::BadRequest("Version does not belong to document".to_string()));
    |                                  ^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `BadRequest` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `bad_request` with a similar name
    |
126 -             return Err(ApiError::BadRequest("Version does not belong to document".to_string()));
126 +             return Err(ApiError::bad_request("Version does not belong to document".to_string()));
    |

error[E0599]: no variant or associated item named `BadRequest` found for enum `AppError` in the current scope
   --> src/services/versions.rs:150:34
    |
150 |             return Err(ApiError::BadRequest("Versions belong to different documents".to_string()));
    |                                  ^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `BadRequest` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `bad_request` with a similar name
    |
150 -             return Err(ApiError::BadRequest("Versions belong to different documents".to_string()));
150 +             return Err(ApiError::bad_request("Versions belong to different documents".to_string()));
    |

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/versions.rs:185:14
    |
184 |           let result: Vec<surrealdb::sql::Value> = self.db
    |  __________________________________________________-
185 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
185 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:188:36
    |
188 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:190:36
    |
190 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `BadRequest` found for enum `AppError` in the current scope
   --> src/services/versions.rs:220:34
    |
220 |             return Err(ApiError::BadRequest("Cannot delete current version".to_string()));
    |                                  ^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `BadRequest` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
help: there is an associated function `bad_request` with a similar name
    |
220 -             return Err(ApiError::BadRequest("Cannot delete current version".to_string()));
220 +             return Err(ApiError::bad_request("Cannot delete current version".to_string()));
    |

error[E0599]: no method named `delete` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/versions.rs:224:14
    |
223 |           let _: Option<DocumentVersion> = self.db
    |  __________________________________________-
224 | |             .delete(("document_version", version_id))
    | |             -^^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following trait defines an item `delete`, perhaps you need to implement it:
            candidate #1: `object_store::ObjectStore`
help: one of the expressions' fields has a method of the same name
    |
224 |             .client.delete(("document_version", version_id))
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:226:36
    |
226 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/versions.rs:244:14
    |
243 |           let versions: Vec<DocumentVersion> = self.db
    |  ______________________________________________-
244 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
244 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:248:36
    |
248 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:250:36
    |
250 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/versions.rs:264:14
    |
263 |           let result: Vec<surrealdb::sql::Value> = self.db
    |  __________________________________________________-
264 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
264 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:267:36
    |
267 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:269:36
    |
269 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `query` found for struct `Arc<services::database::Database>` in the current scope
   --> src/services/versions.rs:288:14
    |
287 |           let _: Vec<surrealdb::sql::Value> = self.db
    |  _____________________________________________-
288 | |             .query(query)
    | |             -^^^^^ method not found in `Arc<Database>`
    | |_____________|
    |
    |
help: one of the expressions' fields has a method of the same name
    |
288 |             .client.query(query)
    |              +++++++

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:291:36
    |
291 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no variant or associated item named `DatabaseError` found for enum `AppError` in the current scope
   --> src/services/versions.rs:293:36
    |
293 |             .map_err(|e| ApiError::DatabaseError(e.to_string()))?;
    |                                    ^^^^^^^^^^^^^ variant or associated item not found in `AppError`
    |
   ::: src/error.rs:10:1
    |
10  | pub enum AppError {
    | ----------------- variant or associated item `DatabaseError` not found for this enum
    |
note: if you're trying to build a new `AppError` consider using one of the following associated functions:
      AppError::bad_request
      AppError::unauthorized
      AppError::forbidden
      AppError::not_found
      and 2 others
   --> src/error.rs:103:5
    |
103 |     pub fn bad_request(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
107 |     pub fn unauthorized(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
111 |     pub fn forbidden(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
115 |     pub fn not_found(msg: impl Into<String>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `validate_token` found for reference `&Arc<AuthService>` in the current scope
  --> src/utils/auth.rs:99:29
   |
99 |     let user = auth_service.validate_token(token).await
   |                             ^^^^^^^^^^^^^^ method not found in `&Arc<AuthService>`

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<CommentService>>` is not satisfied
   --> src/routes/comments.rs:197:46
    |
197 |         .route("/document/:document_id", get(get_document_comments).post(create_comment))
    |                                          --- ^^^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<CommentService>>` is not implemented for `Arc<AuthService>`
    |                                          |
    |                                          required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<CommentService>>`
    = note: required for `fn(Path<String>, ..., ..., ..., ...) -> ... {get_document_comments}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::Query<routes::comments::CommentQuery>, axum::extract::State<Arc<CommentService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<CommentService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-17316254433543370792.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(..., ..., ..., ..., ...) -> ... {create_comment}: Handler<_, ..., _>` is not satisfied
   --> src/routes/comments.rs:197:74
    |
197 |         .route("/document/:document_id", get(get_document_comments).post(create_comment))
    |                                                                     ---- ^^^^^^^^^^^^^^ unsatisfied trait bound
    |                                                                     |
    |                                                                     required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<CommentService>, _>` is not implemented for fn item `fn(Path<String>, State<...>, ..., ..., ...) -> ... {create_comment}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:619:5
    |
619 |     chained_handler_fn!(post, POST);
    |     ^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-13328905330480845923.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<CommentService>>` is not satisfied
   --> src/routes/comments.rs:198:36
    |
198 |         .route("/:comment_id", get(get_comment).put(update_comment).delete(delete_comment))
    |                                --- ^^^^^^^^^^^ the trait `FromRef<Arc<CommentService>>` is not implemented for `Arc<AuthService>`
    |                                |
    |                                required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<CommentService>>`
    = note: required for `fn(Path<String>, State<Arc<...>>, ..., ...) -> ... {get_comment}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::State<Arc<CommentService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<CommentService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-6509946202051339680.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(..., ..., ..., ..., ...) -> ... {update_comment}: Handler<_, ..., _>` is not satisfied
   --> src/routes/comments.rs:198:53
    |
198 |         .route("/:comment_id", get(get_comment).put(update_comment).delete(delete_comment))
    |                                                 --- ^^^^^^^^^^^^^^ unsatisfied trait bound
    |                                                 |
    |                                                 required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<CommentService>, _>` is not implemented for fn item `fn(Path<String>, State<...>, ..., ..., ...) -> ... {update_comment}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::put`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:620:5
    |
620 |     chained_handler_fn!(put, PUT);
    |     ^^^^^^^^^^^^^^^^^^^^---^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::put`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-14792511179840371423.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(..., ..., ..., ...) -> ... {delete_comment}: Handler<_, ..., _>` is not satisfied
   --> src/routes/comments.rs:198:76
    |
198 |         .route("/:comment_id", get(get_comment).put(update_comment).delete(delete_comment))
    |                                                                     ------ ^^^^^^^^^^^^^^ unsatisfied trait bound
    |                                                                     |
    |                                                                     required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<CommentService>, _>` is not implemented for fn item `fn(Path<String>, State<Arc<...>>, ..., ...) -> ... {delete_comment}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::delete`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:614:5
    |
614 |     chained_handler_fn!(delete, DELETE);
    |     ^^^^^^^^^^^^^^^^^^^^------^^^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::delete`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-12034233762318126874.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<CommentService>>` is not satisfied
   --> src/routes/comments.rs:199:44
    |
199 |         .route("/:comment_id/replies", get(get_comment_replies))
    |                                        --- ^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<CommentService>>` is not implemented for `Arc<AuthService>`
    |                                        |
    |                                        required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<CommentService>>`
    = note: required for `fn(Path<String>, ..., ..., ..., ...) -> ... {get_comment_replies}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::Query<routes::comments::CommentQuery>, axum::extract::State<Arc<CommentService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<CommentService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-15405724684216497367.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<CommentService>>` is not satisfied
   --> src/routes/comments.rs:200:42
    |
200 |         .route("/:comment_id/like", post(toggle_comment_like))
    |                                     ---- ^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<CommentService>>` is not implemented for `Arc<AuthService>`
    |                                     |
    |                                     required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<CommentService>>`
    = note: required for `fn(Path<String>, State<...>, ..., ...) -> ... {toggle_comment_like}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::State<Arc<CommentService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<CommentService>, _>`
note: required by a bound in `post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:407:1
    |
407 | top_level_handler_fn!(post, POST);
    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-18070885835039403116.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/routes/comments.rs:196:5
    |
195 |   pub fn router() -> Router<Arc<crate::AppState>> {
    |                      ---------------------------- expected `Router<Arc<AppState>>` because of return type
196 | /     Router::new()
197 | |         .route("/document/:document_id", get(get_document_comments).post(create_comment))
198 | |         .route("/:comment_id", get(get_comment).put(update_comment).delete(delete_comment))
199 | |         .route("/:comment_id/replies", get(get_comment_replies))
200 | |         .route("/:comment_id/like", post(toggle_comment_like))
    | |______________________________________________________________^ expected `Router<Arc<AppState>>`, found `Router<Arc<CommentService>, _>`
    |
    = note: expected struct `Router<Arc<AppState>, axum::body::Body>`
               found struct `Router<Arc<CommentService>, _>`

error[E0308]: mismatched types
  --> src/routes/documents.rs:18:5
   |
17 |   pub fn router() -> Router<Arc<crate::AppState>> {
   |                      ---------------------------- expected `Router<Arc<AppState>>` because of return type
18 | /     Router::new()
19 | |         .route("/:space_slug", get(list_documents).post(create_document))
20 | |         .route("/:space_slug/:doc_slug", get(get_document).put(update_document).delete(delete_document))
21 | |         .route("/:space_slug/tree", get(get_document_tree))
22 | |         .route("/:space_slug/:doc_slug/children", get(get_document_children))
23 | |         .route("/:space_slug/:doc_slug/breadcrumbs", get(get_document_breadcrumbs))
   | |___________________________________________________________________________________^ expected `Router<Arc<AppState>>`, found `Router<Arc<Database>, _>`
   |
   = note: expected struct `Router<Arc<AppState>, axum::body::Body>`
              found struct `Router<Arc<services::database::Database>, _>`

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<FileUploadService>>` is not satisfied
   --> src/routes/files.rs:21:25
    |
21  |         .route("/", get(list_files).post(upload_file))
    |                     --- ^^^^^^^^^^ the trait `FromRef<Arc<FileUploadService>>` is not implemented for `Arc<AuthService>`
    |                     |
    |                     required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<FileUploadService>>`
    = note: required for `fn(State<Arc<FileUploadService>>, ..., ..., ...) -> ... {list_files}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::State<Arc<FileUploadService>>, axum::extract::State<Arc<AuthService>>, HeaderMap, axum::extract::Query<FileQuery>), Arc<FileUploadService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-16850970603458005080.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(State<...>, ..., ..., ...) -> ... {upload_file}: Handler<_, ..., _>` is not satisfied
   --> src/routes/files.rs:21:42
    |
21  |         .route("/", get(list_files).post(upload_file))
    |                                     ---- ^^^^^^^^^^^ unsatisfied trait bound
    |                                     |
    |                                     required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<FileUploadService>, _>` is not implemented for fn item `fn(State<Arc<FileUploadService>>, ..., ..., ...) -> ... {upload_file}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:619:5
    |
619 |     chained_handler_fn!(post, POST);
    |     ^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-4579287790449459492.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<FileUploadService>>` is not satisfied
   --> src/routes/files.rs:22:33
    |
22  |         .route("/:file_id", get(get_file_info).delete(delete_file))
    |                             --- ^^^^^^^^^^^^^ the trait `FromRef<Arc<FileUploadService>>` is not implemented for `Arc<AuthService>`
    |                             |
    |                             required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<FileUploadService>>`
    = note: required for `fn(State<Arc<...>>, ..., ..., ...) -> ... {get_file_info}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::State<Arc<FileUploadService>>, axum::extract::State<Arc<AuthService>>, HeaderMap, axum::extract::Path<std::string::String>), Arc<FileUploadService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-12927293129950389895.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(State<...>, ..., ..., ...) -> ... {delete_file}: Handler<_, ..., _>` is not satisfied
   --> src/routes/files.rs:22:55
    |
22  |         .route("/:file_id", get(get_file_info).delete(delete_file))
    |                                                ------ ^^^^^^^^^^^ unsatisfied trait bound
    |                                                |
    |                                                required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<FileUploadService>, _>` is not implemented for fn item `fn(State<Arc<FileUploadService>>, ..., ..., ...) -> ... {delete_file}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::delete`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:614:5
    |
614 |     chained_handler_fn!(delete, DELETE);
    |     ^^^^^^^^^^^^^^^^^^^^------^^^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::delete`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-14188457383986258864.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<FileUploadService>>` is not satisfied
   --> src/routes/files.rs:23:42
    |
23  |         .route("/:file_id/download", get(download_file))
    |                                      --- ^^^^^^^^^^^^^ the trait `FromRef<Arc<FileUploadService>>` is not implemented for `Arc<AuthService>`
    |                                      |
    |                                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<FileUploadService>>`
    = note: required for `fn(State<Arc<...>>, ..., ..., ...) -> ... {download_file}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::State<Arc<FileUploadService>>, axum::extract::State<Arc<AuthService>>, HeaderMap, axum::extract::Path<std::string::String>), Arc<FileUploadService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-848404660143281441.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<FileUploadService>>` is not satisfied
   --> src/routes/files.rs:24:43
    |
24  |         .route("/:file_id/thumbnail", get(get_thumbnail))
    |                                       --- ^^^^^^^^^^^^^ the trait `FromRef<Arc<FileUploadService>>` is not implemented for `Arc<AuthService>`
    |                                       |
    |                                       required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<FileUploadService>>`
    = note: required for `fn(State<Arc<...>>, ..., ..., ...) -> ... {get_thumbnail}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::State<Arc<FileUploadService>>, axum::extract::State<Arc<AuthService>>, HeaderMap, axum::extract::Path<std::string::String>), Arc<FileUploadService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-6332209665378278605.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
  --> src/routes/files.rs:20:5
   |
19 |   pub fn router() -> Router<Arc<crate::AppState>> {
   |                      ---------------------------- expected `Router<Arc<AppState>>` because of return type
20 | /     Router::new()
21 | |         .route("/", get(list_files).post(upload_file))
22 | |         .route("/:file_id", get(get_file_info).delete(delete_file))
23 | |         .route("/:file_id/download", get(download_file))
24 | |         .route("/:file_id/thumbnail", get(get_thumbnail))
   | |_________________________________________________________^ expected `Router<Arc<AppState>>`, found `Router<Arc<FileUploadService>, _>`
   |
   = note: expected struct `Router<Arc<AppState>, axum::body::Body>`
              found struct `Router<Arc<FileUploadService>, _>`

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<SearchService>>` is not satisfied
   --> src/routes/search.rs:204:25
    |
204 |         .route("/", get(search_documents))
    |                     --- ^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<SearchService>>` is not implemented for `Arc<AuthService>`
    |                     |
    |                     required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<SearchService>>`
    = note: required for `fn(Query<SearchQuery>, State<...>, ..., ...) -> ... {search_documents}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Query<SearchQuery>, axum::extract::State<Arc<SearchService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<SearchService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-9859646577350866836.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<SearchService>>` is not satisfied
   --> src/routes/search.rs:205:32
    |
205 |         .route("/suggest", get(search_suggestions))
    |                            --- ^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<SearchService>>` is not implemented for `Arc<AuthService>`
    |                            |
    |                            required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<SearchService>>`
    = note: required for `fn(Query<SuggestQuery>, ..., ..., ...) -> ... {search_suggestions}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Query<SuggestQuery>, axum::extract::State<Arc<SearchService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<SearchService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-8623573924764297330.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<SearchService>>` is not satisfied
   --> src/routes/search.rs:206:33
    |
206 |         .route("/reindex", post(reindex_documents))
    |                            ---- ^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<SearchService>>` is not implemented for `Arc<AuthService>`
    |                            |
    |                            required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<SearchService>>`
    = note: required for `fn(State<Arc<SearchService>>, ..., ...) -> ... {reindex_documents}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::State<Arc<SearchService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<SearchService>, _>`
note: required by a bound in `post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:407:1
    |
407 | top_level_handler_fn!(post, POST);
    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-17355479387932650855.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<SearchService>>` is not satisfied
   --> src/routes/search.rs:207:41
    |
207 |         .route("/spaces/:space_id", get(search_within_space))
    |                                     --- ^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<SearchService>>` is not implemented for `Arc<AuthService>`
    |                                     |
    |                                     required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<SearchService>>`
    = note: required for `fn(Path<String>, ..., ..., ..., ...) -> ... {search_within_space}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::Query<SearchQuery>, axum::extract::State<Arc<SearchService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<SearchService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-7258370276493126622.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<SearchService>>` is not satisfied
   --> src/routes/search.rs:208:29
    |
208 |         .route("/tags", get(search_by_tags))
    |                         --- ^^^^^^^^^^^^^^ the trait `FromRef<Arc<SearchService>>` is not implemented for `Arc<AuthService>`
    |                         |
    |                         required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<SearchService>>`
    = note: required for `fn(Query<SearchQuery>, State<...>, ..., ...) -> ... {search_by_tags}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Query<SearchQuery>, axum::extract::State<Arc<SearchService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<SearchService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-15006973223773428150.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/routes/search.rs:203:5
    |
202 |   pub fn router() -> Router<Arc<crate::AppState>> {
    |                      ---------------------------- expected `Router<Arc<AppState>>` because of return type
203 | /     Router::new()
204 | |         .route("/", get(search_documents))
205 | |         .route("/suggest", get(search_suggestions))
206 | |         .route("/reindex", post(reindex_documents))
207 | |         .route("/spaces/:space_id", get(search_within_space))
208 | |         .route("/tags", get(search_by_tags))
    | |____________________________________________^ expected `Router<Arc<AppState>>`, found `Router<Arc<SearchService>, _>`
    |
    = note: expected struct `Router<Arc<AppState>, axum::body::Body>`
               found struct `Router<Arc<SearchService>, _>`

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<SearchService>>` is not satisfied
   --> src/routes/stats.rs:136:31
    |
136 |         .route("/search", get(get_search_stats))
    |                           --- ^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<SearchService>>` is not implemented for `Arc<AuthService>`
    |                           |
    |                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<SearchService>>`
    = note: required for `fn(State<Arc<SearchService>>, ..., ...) -> ... {get_search_stats}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::State<Arc<SearchService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<SearchService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-1367176103672415937.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/routes/stats.rs:137:30
    |
137 |         .route("/documents", get(get_document_stats))
    |          -----               ^^^^^^^^^^^^^^^^^^^^^^^ expected `MethodRouter<Arc<SearchService>, _>`, found `MethodRouter<Arc<AuthService>, _>`
    |          |
    |          arguments to this method are incorrect
    |
    = note: expected struct `MethodRouter<Arc<SearchService>, _>`
               found struct `MethodRouter<Arc<AuthService>, _>`
note: method defined here
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/mod.rs:123:12
    |
123 |     pub fn route(mut self, path: &str, method_router: MethodRouter<S, B>) -> Self {
    |            ^^^^^

error[E0308]: mismatched types
   --> src/routes/stats.rs:135:5
    |
134 |   pub fn router() -> Router<Arc<crate::AppState>> {
    |                      ---------------------------- expected `Router<Arc<AppState>>` because of return type
135 | /     Router::new()
136 | |         .route("/search", get(get_search_stats))
137 | |         .route("/documents", get(get_document_stats))
    | |_____________________________________________________^ expected `Router<Arc<AppState>>`, found `Router<Arc<SearchService>, _>`
    |
    = note: expected struct `Router<Arc<AppState>, axum::body::Body>`
               found struct `Router<Arc<SearchService>, _>`

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:355:25
    |
355 |         .route("/", get(get_tags).post(create_tag))
    |                     --- ^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                     |
    |                     required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Query<TagQuery>, State<Arc<...>>, ..., ...) -> ... {get_tags}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Query<TagQuery>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-2156418841788651931.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(State<...>, ..., ..., ...) -> ... {create_tag}: Handler<_, ..., _>` is not satisfied
   --> src/routes/tags.rs:355:40
    |
355 |         .route("/", get(get_tags).post(create_tag))
    |                                   ---- ^^^^^^^^^^ unsatisfied trait bound
    |                                   |
    |                                   required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<TagService>, _>` is not implemented for fn item `fn(State<Arc<TagService>>, State<...>, ..., ...) -> ... {create_tag}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:619:5
    |
619 |     chained_handler_fn!(post, POST);
    |     ^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-1243596947293463112.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:356:32
    |
356 |         .route("/popular", get(get_popular_tags))
    |                            --- ^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                            |
    |                            required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Query<PopularTagsQuery>, ..., ..., ...) -> ... {get_popular_tags}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Query<PopularTagsQuery>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-11932158104323487881.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:357:32
    |
357 |         .route("/suggest", get(suggest_tags))
    |                            --- ^^^^^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                            |
    |                            required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Query<TagQuery>, State<Arc<...>>, ..., ...) -> ... {suggest_tags}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Query<TagQuery>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-2873452004266682715.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:358:35
    |
358 |         .route("/statistics", get(get_tag_statistics))
    |                               --- ^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                               |
    |                               required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Query<TagQuery>, State<...>, ..., ...) -> ... {get_tag_statistics}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Query<TagQuery>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-13975395733194493202.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:359:32
    |
359 |         .route("/:tag_id", get(get_tag).put(update_tag).delete(delete_tag))
    |                            --- ^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                            |
    |                            required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Path<String>, State<Arc<TagService>>, ..., ...) -> ... {get_tag}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-10624400912243255327.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(..., ..., ..., ..., ...) -> ... {update_tag}: Handler<_, ..., _>` is not satisfied
   --> src/routes/tags.rs:359:45
    |
359 |         .route("/:tag_id", get(get_tag).put(update_tag).delete(delete_tag))
    |                                         --- ^^^^^^^^^^ unsatisfied trait bound
    |                                         |
    |                                         required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<TagService>, _>` is not implemented for fn item `fn(Path<String>, State<Arc<...>>, ..., ..., ...) -> ... {update_tag}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::put`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:620:5
    |
620 |     chained_handler_fn!(put, PUT);
    |     ^^^^^^^^^^^^^^^^^^^^---^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::put`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-13383311260076418484.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(Path<...>, ..., ..., ...) -> ... {delete_tag}: Handler<_, ..., _>` is not satisfied
   --> src/routes/tags.rs:359:64
    |
359 |         .route("/:tag_id", get(get_tag).put(update_tag).delete(delete_tag))
    |                                                         ------ ^^^^^^^^^^ unsatisfied trait bound
    |                                                         |
    |                                                         required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<TagService>, _>` is not implemented for fn item `fn(Path<String>, State<Arc<TagService>>, ..., ...) -> ... {delete_tag}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::delete`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:614:5
    |
614 |     chained_handler_fn!(delete, DELETE);
    |     ^^^^^^^^^^^^^^^^^^^^------^^^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::delete`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-3176017105318263873.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:360:42
    |
360 |         .route("/:tag_id/documents", get(get_documents_by_tag))
    |                                      --- ^^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                                      |
    |                                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Path<String>, ..., ..., ..., ...) -> ... {get_documents_by_tag}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::Query<TagQuery>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-12840743604791692398.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:361:39
    |
361 |         .route("/documents/tag", post(tag_document))
    |                                  ---- ^^^^^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                                  |
    |                                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(State<Arc<TagService>>, State<...>, ..., ...) -> ... {tag_document}` to implement `Handler<(axum_core::extract::private::ViaRequest, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>, axum::Json<TagDocumentRequest>), Arc<TagService>, _>`
note: required by a bound in `post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:407:1
    |
407 | top_level_handler_fn!(post, POST);
    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-14324624841742647114.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:362:47
    |
362 |         .route("/documents/:document_id", get(get_document_tags))
    |                                           --- ^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                                           |
    |                                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Path<String>, State<Arc<...>>, ..., ...) -> ... {get_document_tags}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-6230299192941807823.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<TagService>>` is not satisfied
   --> src/routes/tags.rs:363:63
    |
363 |         .route("/documents/:document_id/tags/:tag_id", delete(untag_document))
    |                                                        ------ ^^^^^^^^^^^^^^ the trait `FromRef<Arc<TagService>>` is not implemented for `Arc<AuthService>`
    |                                                        |
    |                                                        required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<TagService>>`
    = note: required for `fn(Path<(String, String)>, ..., ..., ...) -> ... {untag_document}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<(std::string::String, std::string::String)>, axum::extract::State<Arc<TagService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<TagService>, _>`
note: required by a bound in `delete`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:402:1
    |
402 | top_level_handler_fn!(delete, DELETE);
    | ^^^^^^^^^^^^^^^^^^^^^^------^^^^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `delete`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-13078423280727525007.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/routes/tags.rs:354:5
    |
353 |   pub fn router() -> Router<Arc<crate::AppState>> {
    |                      ---------------------------- expected `Router<Arc<AppState>>` because of return type
354 | /     Router::new()
355 | |         .route("/", get(get_tags).post(create_tag))
356 | |         .route("/popular", get(get_popular_tags))
357 | |         .route("/suggest", get(suggest_tags))
...   |
362 | |         .route("/documents/:document_id", get(get_document_tags))
363 | |         .route("/documents/:document_id/tags/:tag_id", delete(untag_document))
    | |______________________________________________________________________________^ expected `Router<Arc<AppState>>`, found `Router<Arc<TagService>, _>`
    |
    = note: expected struct `Router<Arc<AppState>, axum::body::Body>`
               found struct `Router<Arc<TagService>, _>`

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:255:46
    |
255 |         .route("/:document_id/versions", get(get_document_versions).post(create_document_version))
    |                                          --- ^^^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                          |
    |                                          required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<String>, ..., ..., ..., ...) -> ... {get_document_versions}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::Query<VersionQuery>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<VersionService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-6473031496989981077.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(..., ..., ..., ..., ...) -> ... {create_document_version}: Handler<_, ..., _>` is not satisfied
   --> src/routes/versions.rs:255:74
    |
255 |         .route("/:document_id/versions", get(get_document_versions).post(create_document_version))
    |                                                                     ---- ^^^^^^^^^^^^^^^^^^^^^^^ unsatisfied trait bound
    |                                                                     |
    |                                                                     required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<VersionService>, _>` is not implemented for fn item `fn(Path<String>, ..., ..., ..., ...) -> ... {create_document_version}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:619:5
    |
619 |     chained_handler_fn!(post, POST);
    |     ^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-16962065280201832259.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:256:54
    |
256 |         .route("/:document_id/versions/current", get(get_current_version))
    |                                                  --- ^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                                  |
    |                                                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<String>, State<...>, ..., ...) -> ... {get_current_version}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<VersionService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-976853256858650885.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:257:54
    |
257 |         .route("/:document_id/versions/summary", get(get_version_history_summary))
    |                                                  --- ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                                  |
    |                                                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<String>, ..., ..., ...) -> ... {get_version_history_summary}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<VersionService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-15608947541839495429.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:258:54
    |
258 |         .route("/:document_id/versions/compare", get(compare_versions))
    |                                                  --- ^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                                  |
    |                                                  required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<String>, Query<...>, ..., ..., ...) -> ... {compare_versions}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::Query<CompareVersionsQuery>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<VersionService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-8930334149103892020.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:259:57
    |
259 |         .route("/:document_id/versions/date-range", get(get_versions_by_date_range))
    |                                                     --- ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                                     |
    |                                                     required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<...>, ..., ..., ..., ...) -> ... {get_versions_by_date_range}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<std::string::String>, axum::extract::Query<DateRangeQuery>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<VersionService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-12297454399886815886.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:260:58
    |
260 |         .route("/:document_id/versions/:version_id", get(get_version).delete(delete_version))
    |                                                      --- ^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                                      |
    |                                                      required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<(String, String)>, State<...>, ..., ...) -> ... {get_version}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<(std::string::String, std::string::String)>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<VersionService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-7256246309382977998.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `fn(..., ..., ..., ...) -> ... {delete_version}: Handler<_, ..., _>` is not satisfied
   --> src/routes/versions.rs:260:78
    |
260 |         .route("/:document_id/versions/:version_id", get(get_version).delete(delete_version))
    |                                                                       ------ ^^^^^^^^^^^^^^ unsatisfied trait bound
    |                                                                       |
    |                                                                       required by a bound introduced by this call
    |
    = help: the trait `Handler<_, Arc<VersionService>, _>` is not implemented for fn item `fn(Path<(String, String)>, ..., ..., ...) -> ... {delete_version}`
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
note: required by a bound in `MethodRouter::<S, B>::delete`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:614:5
    |
614 |     chained_handler_fn!(delete, DELETE);
    |     ^^^^^^^^^^^^^^^^^^^^------^^^^^^^^^
    |     |                   |
    |     |                   required by a bound in this associated function
    |     required by this bound in `MethodRouter::<S, B>::delete`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-14729553163408381043.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `chained_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:261:67
    |
261 |         .route("/:document_id/versions/:version_id/restore", post(restore_version))
    |                                                              ---- ^^^^^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                                              |
    |                                                              required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<(String, ...)>, ..., ..., ..., ...) -> ... {restore_version}` to implement `Handler<(axum_core::extract::private::ViaRequest, axum::extract::Path<(std::string::String, std::string::String)>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>, axum::Json<RestoreVersionRequest>), Arc<VersionService>, _>`
note: required by a bound in `post`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:407:1
    |
407 | top_level_handler_fn!(post, POST);
    | ^^^^^^^^^^^^^^^^^^^^^^----^^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `post`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-7730270957878591833.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `Arc<AuthService>: FromRef<Arc<VersionService>>` is not satisfied
   --> src/routes/versions.rs:262:63
    |
262 |         .route("/:document_id/versions/:version_id/diff", get(get_version_diff))
    |                                                           --- ^^^^^^^^^^^^^^^^ the trait `FromRef<Arc<VersionService>>` is not implemented for `Arc<AuthService>`
    |                                                           |
    |                                                           required by a bound introduced by this call
    |
    = help: the following other types implement trait `Handler<T, S, B>`:
              `MethodRouter<S, B>` implements `Handler<(), S, B>`
              `axum::handler::Layered<L, H, T, S, B, B2>` implements `Handler<T, S, B2>`
    = note: required for `axum::extract::State<Arc<AuthService>>` to implement `FromRequestParts<Arc<VersionService>>`
    = note: required for `fn(Path<(String, ...)>, ..., ..., ..., ...) -> ... {get_version_diff}` to implement `Handler<(axum_core::extract::private::ViaParts, axum::extract::Path<(std::string::String, std::string::String)>, axum::extract::Query<CompareVersionsQuery>, axum::extract::State<Arc<VersionService>>, axum::extract::State<Arc<AuthService>>, Extension<std::string::String>), Arc<VersionService>, _>`
note: required by a bound in `axum::routing::get`
   --> /home/ubuntu/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/axum-0.6.20/src/routing/method_routing.rs:403:1
    |
403 | top_level_handler_fn!(get, GET);
    | ^^^^^^^^^^^^^^^^^^^^^^---^^^^^^
    | |                     |
    | |                     required by a bound in this function
    | required by this bound in `get`
    = note: the full name for the type has been written to '/home/ubuntu/Rainbow-Hub/Rainbow-Docs/target/debug/deps/rainbow_docs-0bdeb7865dd60a13.long-type-6915142861729222237.txt'
    = note: consider using `--verbose` to print the full type name to the console
    = note: this error originates in the macro `top_level_handler_fn` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0308]: mismatched types
   --> src/routes/versions.rs:254:5
    |
253 |   pub fn router() -> Router<Arc<crate::AppState>> {
    |                      ---------------------------- expected `Router<Arc<AppState>>` because of return type
254 | /     Router::new()
255 | |         .route("/:document_id/versions", get(get_document_versions).post(create_document_version))
256 | |         .route("/:document_id/versions/current", get(get_current_version))
257 | |         .route("/:document_id/versions/summary", get(get_version_history_summary))
...   |
261 | |         .route("/:document_id/versions/:version_id/restore", post(restore_version))
262 | |         .route("/:document_id/versions/:version_id/diff", get(get_version_diff))
    | |________________________________________________________________________________^ expected `Router<Arc<AppState>>`, found `Router<Arc<VersionService>, _>`
    |
    = note: expected struct `Router<Arc<AppState>, axum::body::Body>`
               found struct `Router<Arc<VersionService>, _>`

error[E0308]: mismatched types
  --> src/main.rs:83:9
   |
82 |     let document_service = Arc::new(DocumentService::new(
   |                                     -------------------- arguments to this function are incorrect
83 |         shared_db.clone(),
   |         ^^^^^^^^^^^^^^^^^ expected `Arc<Surreal<Client>>`, found `Arc<Database>`
   |
   = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
              found struct `Arc<services::database::Database>`
note: associated function defined here
  --> src/services/documents.rs:24:12
   |
24 |     pub fn new(
   |            ^^^
25 |         db: Arc<Surreal<Client>>,
   |         ------------------------

error[E0308]: mismatched types
  --> src/main.rs:87:56
   |
87 |     let comment_service = Arc::new(CommentService::new(shared_db.clone(), auth_service.clone()));
   |                                    ------------------- ^^^^^^^^^^^^^^^^^ expected `Arc<Surreal<Client>>`, found `Arc<Database>`
   |                                    |
   |                                    arguments to this function are incorrect
   |
   = note: expected struct `Arc<Surreal<surrealdb::engine::remote::ws::Client>>`
              found struct `Arc<services::database::Database>`
note: associated function defined here
  --> src/services/comments.rs:18:12
   |
18 |     pub fn new(db: Arc<Surreal<Client>>, auth_service: Arc<AuthService>) -> Self {
   |            ^^^ ------------------------

warning: unused variable: `state`
   --> src/services/auth.rs:329:52
    |
329 |     async fn from_request_parts(parts: &mut Parts, state: &S) -> Result<Self> {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

Some errors have detailed explanations: E0061, E0107, E0277, E0282, E0283, E0308, E0599, E0609.
For more information about an error, try `rustc --explain E0061`.
warning: `rainbow-docs` (bin "rainbow-docs") generated 26 warnings
error: could not compile `rainbow-docs` (bin "rainbow-docs") due to 247 previous errors; 26 warnings emitted
