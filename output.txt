warning: unused imports: `delete` and `put`
 --> src/routes/comments.rs:5:26
  |
5 |     routing::{get, post, put, delete},
  |                          ^^^  ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `auth::AuthService` and `comments::CommentService`
  --> src/routes/comments.rs:15:16
   |
15 |     services::{auth::AuthService, comments::CommentService},
   |                ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `delete`, `http::StatusCode`, `post`, and `put`
 --> src/routes/documents.rs:6:5
  |
6 |     http::StatusCode,
  |     ^^^^^^^^^^^^^^^^
7 |     response::Json,
8 |     routing::{get, post, put, delete},
  |                    ^^^^  ^^^  ^^^^^^

warning: unused import: `warn`
  --> src/routes/documents.rs:13:21
   |
13 | use tracing::{info, warn};
   |                     ^^^^

warning: unused imports: `Response`, `delete`, and `post`
 --> src/routes/files.rs:4:30
  |
4 |     response::{IntoResponse, Response},
  |                              ^^^^^^^^
5 |     routing::{delete, get, post},
  |               ^^^^^^       ^^^^

warning: unused import: `error`
  --> src/routes/files.rs:10:15
   |
10 | use tracing::{error, info};
   |               ^^^^^

warning: unused imports: `auth::AuthService` and `file_upload::FileUploadService`
  --> src/routes/files.rs:15:16
   |
15 |     services::{file_upload::FileUploadService, auth::AuthService},
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^

warning: unused imports: `auth::AuthService` and `search::SearchService`
  --> src/routes/search.rs:14:16
   |
14 |     services::{auth::AuthService, search::SearchService},
   |                ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `delete`, `http::StatusCode`, `post`, and `put`
 --> src/routes/spaces.rs:6:5
  |
6 |     http::StatusCode,
  |     ^^^^^^^^^^^^^^^^
7 |     response::Json,
8 |     routing::{get, post, put, delete},
  |                    ^^^^  ^^^  ^^^^^^

warning: unused import: `warn`
  --> src/routes/spaces.rs:13:21
   |
13 | use tracing::{info, warn};
   |                     ^^^^

warning: unused imports: `auth::AuthService` and `search::SearchService`
  --> src/routes/stats.rs:13:16
   |
13 |     services::{auth::AuthService, search::SearchService},
   |                ^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `put`
 --> src/routes/tags.rs:5:26
  |
5 |     routing::{get, post, put, delete},
  |                          ^^^

warning: unused imports: `TagService` and `auth::AuthService`
  --> src/routes/tags.rs:15:16
   |
15 |     services::{auth::AuthService, tags::{TagService, TagStatistics}},
   |                ^^^^^^^^^^^^^^^^^         ^^^^^^^^^^

warning: unused import: `delete`
 --> src/routes/versions.rs:5:26
  |
5 |     routing::{get, post, delete},
  |                          ^^^^^^

warning: unused imports: `VersionService` and `auth::AuthService`
  --> src/routes/versions.rs:16:9
   |
16 |         auth::AuthService, 
   |         ^^^^^^^^^^^^^^^^^
17 |         versions::{VersionService, VersionComparison, VersionHistorySummary},
   |                    ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/models/space.rs:3:5
  |
3 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `State` and `StatusCode`
 --> src/services/auth.rs:5:33
  |
5 |     extract::{FromRequestParts, State},
  |                                 ^^^^^
6 |     headers::{authorization::Bearer, Authorization},
7 |     http::{request::Parts, StatusCode},
  |                            ^^^^^^^^^^

warning: unused imports: `Surreal` and `engine::remote::ws::Client`
 --> src/services/comments.rs:2:29
  |
2 | use surrealdb::{sql::Thing, Surreal, engine::remote::ws::Client};
  |                             ^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::time::Duration`
 --> src/services/database.rs:4:5
  |
4 | use std::time::Duration;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Surreal` and `engine::remote::ws::Client`
 --> src/services/documents.rs:2:29
  |
2 | use surrealdb::{sql::Thing, Surreal, engine::remote::ws::Client};
  |                             ^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::models::document::DocumentQuery`
  --> src/services/documents.rs:53:13
   |
53 |         use crate::models::document::DocumentQuery;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `Datetime`
 --> src/services/file_upload.rs:5:22
  |
5 | use surrealdb::sql::{Datetime, Thing};
  |                      ^^^^^^^^

warning: unused import: `crate::config::Config`
 --> src/services/spaces.rs:1:5
  |
1 | use crate::config::Config;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `surrealdb::sql::Thing`
  --> src/services/spaces.rs:11:5
   |
11 | use surrealdb::sql::Thing;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `StatusCode` and `response::Response`
 --> src/utils/auth.rs:4:12
  |
4 |     http::{StatusCode, HeaderMap},
  |            ^^^^^^^^^^
5 |     response::Response,
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashSet`
 --> src/utils/auth.rs:7:5
  |
7 | use std::collections::HashSet;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AppError`
 --> src/utils/markdown.rs:1:20
  |
1 | use crate::error::{AppError, Result};
  |                    ^^^^^^^^

warning: unused imports: `ClassStyle` and `ClassedHTMLGenerator`
 --> src/utils/markdown.rs:3:21
  |
3 | use syntect::html::{ClassedHTMLGenerator, ClassStyle};
  |                     ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^

warning: unused variable: `app_state`
  --> src/routes/documents.rs:67:11
   |
67 |     State(app_state): State<Arc<AppState>>,
   |           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_app_state`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `space_slug`
  --> src/routes/documents.rs:68:11
   |
68 |     Path((space_slug, doc_slug)): Path<(String, String)>,
   |           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_slug`

warning: unused variable: `user`
  --> src/routes/documents.rs:69:18
   |
69 |     OptionalUser(user): OptionalUser,
   |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_user`

warning: unused variable: `app_state`
  --> src/routes/documents.rs:89:11
   |
89 |     State(app_state): State<Arc<AppState>>,
   |           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_app_state`

warning: unused variable: `request`
  --> src/routes/documents.rs:92:10
   |
92 |     Json(request): Json<UpdateDocumentRequest>,
   |          ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

warning: unused variable: `app_state`
   --> src/routes/documents.rs:109:11
    |
109 |     State(app_state): State<Arc<AppState>>,
    |           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_app_state`

warning: unused variable: `app_state`
   --> src/routes/documents.rs:128:11
    |
128 |     State(app_state): State<Arc<AppState>>,
    |           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_app_state`

warning: unused variable: `space_slug`
   --> src/routes/documents.rs:129:10
    |
129 |     Path(space_slug): Path<String>,
    |          ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_slug`

warning: unused variable: `user`
   --> src/routes/documents.rs:130:18
    |
130 |     OptionalUser(user): OptionalUser,
    |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_user`

warning: unused variable: `app_state`
   --> src/routes/documents.rs:145:11
    |
145 |     State(app_state): State<Arc<AppState>>,
    |           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_app_state`

warning: unused variable: `space_slug`
   --> src/routes/documents.rs:146:11
    |
146 |     Path((space_slug, doc_slug)): Path<(String, String)>,
    |           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_slug`

warning: unused variable: `doc_slug`
   --> src/routes/documents.rs:146:23
    |
146 |     Path((space_slug, doc_slug)): Path<(String, String)>,
    |                       ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_doc_slug`

warning: unused variable: `user`
   --> src/routes/documents.rs:147:18
    |
147 |     OptionalUser(user): OptionalUser,
    |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_user`

warning: unused variable: `app_state`
   --> src/routes/documents.rs:162:11
    |
162 |     State(app_state): State<Arc<AppState>>,
    |           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_app_state`

warning: unused variable: `space_slug`
   --> src/routes/documents.rs:163:11
    |
163 |     Path((space_slug, doc_slug)): Path<(String, String)>,
    |           ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_slug`

warning: unused variable: `doc_slug`
   --> src/routes/documents.rs:163:23
    |
163 |     Path((space_slug, doc_slug)): Path<(String, String)>,
    |                       ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_doc_slug`

warning: unused variable: `user`
   --> src/routes/documents.rs:164:18
    |
164 |     OptionalUser(user): OptionalUser,
    |                  ^^^^ help: if this is intentional, prefix it with an underscore: `_user`

warning: unused variable: `search_service`
  --> src/routes/stats.rs:58:9
   |
58 |     let search_service = &app_state.search_service;
   |         ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_search_service`

warning: unused variable: `query`
   --> src/routes/versions.rs:239:11
    |
239 |     Query(query): Query<DateRangeQuery>,
    |           ^^^^^ help: if this is intentional, prefix it with an underscore: `_query`

warning: unused variable: `token`
   --> src/services/auth.rs:290:89
    |
290 |     pub async fn check_multiple_permissions(&self, user_id: &str, permissions: &[&str], token: &str) -> Result<HashMap<String, bool>> {
    |                                                                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_token`

warning: unused variable: `space_slug`
  --> src/services/documents.rs:49:9
   |
49 |         space_slug: &str,
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_slug`

warning: unused variable: `user`
  --> src/services/documents.rs:51:9
   |
51 |         user: Option<&crate::services::auth::User>,
   |         ^^^^ help: if this is intentional, prefix it with an underscore: `_user`

warning: unused variable: `user_id`
   --> src/services/file_upload.rs:195:9
    |
195 |         user_id: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `doc_obj`
   --> src/services/search.rs:371:23
    |
371 |             if let Ok(doc_obj) = surrealdb::sql::Object::try_from(doc) {
    |                       ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_doc_obj`

warning: unused variable: `updater_id`
  --> src/services/tags.rs:68:9
   |
68 |         updater_id: &str,
   |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_updater_id`

warning: unused variable: `space_id`
   --> src/services/tags.rs:131:33
    |
131 |         let query = if let Some(space_id) = space_id {
    |                                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_id`

warning: unused variable: `space_id`
   --> src/services/tags.rs:155:33
    |
155 |         let query = if let Some(space_id) = space_id {
    |                                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_id`

warning: unused variable: `space_id`
   --> src/services/tags.rs:178:40
    |
178 |         let search_query = if let Some(space_id) = space_id {
    |                                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_id`

warning: unused variable: `space_id`
   --> src/services/tags.rs:314:39
    |
314 |         let total_query = if let Some(space_id) = space_id {
    |                                       ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_id`

warning: unused variable: `space_id`
   --> src/services/tags.rs:336:38
    |
336 |         let used_query = if let Some(space_id) = space_id {
    |                                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_id`

warning: unused variable: `space_id`
   --> src/services/tags.rs:368:33
    |
368 |         let query = if let Some(space_id) = space_id {
    |                                 ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_space_id`

warning: unused variable: `summary_data`
   --> src/services/versions.rs:192:21
    |
192 |         if let Some(summary_data) = result.first() {
    |                     ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_summary_data`

warning: unused variable: `editor_id`
   --> src/models/comment.rs:157:55
    |
157 |     pub fn update_content(&mut self, content: String, editor_id: String) {
    |                                                       ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_editor_id`

warning: unused variable: `state`
   --> src/services/auth.rs:329:52
    |
329 |     async fn from_request_parts(parts: &mut Parts, state: &S) -> Result<Self> {
    |                                                    ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `level`
  --> src/utils/markdown.rs:80:34
   |
80 |                     if let Some((level, ref mut title)) = current_heading {
   |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_level`

warning: field `sort` is never read
  --> src/routes/comments.rs:22:9
   |
19 | pub struct CommentQuery {
   |            ------------ field in this struct
...
22 |     pub sort: Option<String>,
   |         ^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `summary` is never read
  --> src/routes/versions.rs:39:9
   |
38 | pub struct RestoreVersionRequest {
   |            --------------------- field in this struct
39 |     pub summary: Option<String>,
   |         ^^^^^^^

warning: fields `from_date` and `to_date` are never read
   --> src/routes/versions.rs:259:9
    |
258 | pub struct DateRangeQuery {
    |            -------------- fields in this struct
259 |     pub from_date: Option<String>,
    |         ^^^^^^^^^
260 |     pub to_date: Option<String>,
    |         ^^^^^^^

warning: fields `resource_type`, `resource_id`, `user_id`, `role_id`, `permissions`, and `expires_at` are never read
  --> src/models/permission.rs:28:9
   |
27 | pub struct GrantPermissionRequest {
   |            ---------------------- fields in this struct
28 |     pub resource_type: ResourceType,
   |         ^^^^^^^^^^^^^
29 |     pub resource_id: String,
   |         ^^^^^^^^^^^
30 |     pub user_id: Option<String>,
   |         ^^^^^^^
31 |     pub role_id: Option<String>,
   |         ^^^^^^^
32 |     pub permissions: Vec<String>,
   |         ^^^^^^^^^^^
33 |     pub expires_at: Option<Datetime>,
   |         ^^^^^^^^^^
   |
   = note: `GrantPermissionRequest` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: multiple associated items are never used
  --> src/models/permission.rs:45:12
   |
44 | impl DocumentPermission {
   | ----------------------- associated items in this implementation
45 |     pub fn new(
   |            ^^^
...
65 |     pub fn for_user(mut self, user_id: String) -> Self {
   |            ^^^^^^^^
...
70 |     pub fn for_role(mut self, role_id: String) -> Self {
   |            ^^^^^^^^
...
75 |     pub fn with_expiry(mut self, expires_at: Datetime) -> Self {
   |            ^^^^^^^^^^^
...
80 |     pub fn as_inherited(mut self) -> Self {
   |            ^^^^^^^^^^^^
...
85 |     pub fn is_expired(&self) -> bool {
   |            ^^^^^^^^^^
...
91 |     pub fn has_permission(&self, permission: &str) -> bool {
   |            ^^^^^^^^^^^^^^

warning: associated items `new`, `add_space_permission`, `add_document_permission`, `add_inherited_permissions`, and `has_permission_for_resource` are never used
   --> src/models/permission.rs:97:12
    |
96  | impl UserPermissions {
    | -------------------- associated items in this implementation
97  |     pub fn new(user_id: String) -> Self {
    |            ^^^
...
106 |     pub fn add_space_permission(&mut self, space_id: String, permissions: Vec<String>) {
    |            ^^^^^^^^^^^^^^^^^^^^
...
110 |     pub fn add_document_permission(&mut self, document_id: String, permissions: Vec<String>) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
114 |     pub fn add_inherited_permissions(&mut self, permissions: Vec<String>) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^
...
118 |     pub fn has_permission_for_resource(&self, resource_type: ResourceType, resource_id: &str, permission: &str) -> bool {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `hex_color_regex` is never used
  --> src/models/tag.rs:10:8
   |
10 | pub fn hex_color_regex() -> &'static Regex {
   |        ^^^^^^^^^^^^^^^

warning: field `auth_service` is never read
  --> src/services/comments.rs:14:5
   |
12 | pub struct CommentService {
   |            -------------- field in this struct
13 |     db: Arc<Database>,
14 |     auth_service: Arc<AuthService>,
   |     ^^^^^^^^^^^^
   |
   = note: `CommentService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `auth_service` is never read
  --> src/services/documents.rs:16:5
   |
14 | pub struct DocumentService {
   |            --------------- field in this struct
15 |     db: Arc<Database>,
16 |     auth_service: Arc<AuthService>,
   |     ^^^^^^^^^^^^
   |
   = note: `DocumentService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `auth_service` is never read
  --> src/services/file_upload.rs:22:5
   |
20 | pub struct FileUploadService {
   |            ----------------- field in this struct
21 |     db: Arc<Database>,
22 |     auth_service: Arc<AuthService>,
   |     ^^^^^^^^^^^^
   |
   = note: `FileUploadService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `auth_service` is never read
  --> src/services/search.rs:17:5
   |
15 | pub struct SearchService {
   |            ------------- field in this struct
16 |     db: Arc<Database>,
17 |     auth_service: Arc<AuthService>,
   |     ^^^^^^^^^^^^
   |
   = note: `SearchService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `auth_service` is never read
  --> src/services/tags.rs:14:5
   |
12 | pub struct TagService {
   |            ---------- field in this struct
13 |     db: Arc<Database>,
14 |     auth_service: Arc<AuthService>,
   |     ^^^^^^^^^^^^
   |
   = note: `TagService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `auth_service` is never read
  --> src/services/versions.rs:14:5
   |
12 | pub struct VersionService {
   |            -------------- field in this struct
13 |     db: Arc<Database>,
14 |     auth_service: Arc<AuthService>,
   |     ^^^^^^^^^^^^
   |
   = note: `VersionService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: function `has_permission` is never used
  --> src/utils/auth.rs:11:8
   |
11 | pub fn has_permission(user: &User, permission: &str) -> bool {
   |        ^^^^^^^^^^^^^^

warning: function `has_role` is never used
  --> src/utils/auth.rs:16:8
   |
16 | pub fn has_role(user: &User, role: &str) -> bool {
   |        ^^^^^^^^

warning: function `require_admin` is never used
  --> src/utils/auth.rs:21:8
   |
21 | pub fn require_admin(user: &User) -> Result<()> {
   |        ^^^^^^^^^^^^^

warning: function `can_read_document` is never used
  --> src/utils/auth.rs:31:8
   |
31 | pub fn can_read_document(user: &User) -> bool {
   |        ^^^^^^^^^^^^^^^^^

warning: function `can_write_document` is never used
  --> src/utils/auth.rs:38:8
   |
38 | pub fn can_write_document(user: &User) -> bool {
   |        ^^^^^^^^^^^^^^^^^^

warning: function `can_admin_document` is never used
  --> src/utils/auth.rs:44:8
   |
44 | pub fn can_admin_document(user: &User) -> bool {
   |        ^^^^^^^^^^^^^^^^^^

warning: function `can_manage_space` is never used
  --> src/utils/auth.rs:49:8
   |
49 | pub fn can_manage_space(user: &User, space_owner_id: &str) -> bool {
   |        ^^^^^^^^^^^^^^^^

warning: variants `Read`, `Write`, and `Admin` are never constructed
  --> src/utils/auth.rs:56:5
   |
55 | pub enum DocumentPermission {
   |          ------------------ variants in this enum
56 |     Read,
   |     ^^^^
57 |     Write,
   |     ^^^^^
58 |     Admin,
   |     ^^^^^
   |
   = note: `DocumentPermission` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: function `has_document_permission` is never used
  --> src/utils/auth.rs:62:8
   |
62 | pub fn has_document_permission(
   |        ^^^^^^^^^^^^^^^^^^^^^^^

warning: fields `theme_set` and `default_theme` are never read
  --> src/utils/markdown.rs:27:5
   |
25 | pub struct MarkdownProcessor {
   |            ----------------- fields in this struct
26 |     syntax_set: SyntaxSet,
27 |     theme_set: ThemeSet,
   |     ^^^^^^^^^
28 |     default_theme: Theme,
   |     ^^^^^^^^^^^^^

warning: method `BadRequest` should have a snake case name
  --> src/error.rs:58:12
   |
58 |     pub fn BadRequest(msg: String) -> Self {
   |            ^^^^^^^^^^ help: convert the identifier to snake case: `bad_request`
   |
   = note: `#[warn(non_snake_case)]` on by default

warning: method `DatabaseError` should have a snake case name
  --> src/error.rs:62:12
   |
62 |     pub fn DatabaseError(msg: String) -> Self {
   |            ^^^^^^^^^^^^^ help: convert the identifier to snake case: `database_error`

warning: method `InternalServerError` should have a snake case name
  --> src/error.rs:66:12
   |
66 |     pub fn InternalServerError(msg: String) -> Self {
   |            ^^^^^^^^^^^^^^^^^^^ help: convert the identifier to snake case: `internal_server_error`

warning: `rainbow-docs` (bin "rainbow-docs") generated 89 warnings (run `cargo fix --bin "rainbow-docs"` to apply 28 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.48s
